
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002faa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00002faa  0000303e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080011e  0080011e  000030fc  2**0
                  ALLOC
  3 .stab         00002cdc  00000000  00000000  000030fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001195  00000000  00000000  00005dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000070ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000721d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aeed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 32       	cpi	r26, 0x21	; 33
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <main>
      8a:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ef       	ldi	r26, 0xFD	; 253
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MC1_init>:
/*
 * Description:
 * 				This Function initiates the HMI ECU, by configuring
 * 				the UART module and the LCD Module
 */
void MC1_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	UART_config config={9600,3,0,0};
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	99 87       	std	Y+9, r25	; 0x09
     b60:	88 87       	std	Y+8, r24	; 0x08
     b62:	e5 e0       	ldi	r30, 0x05	; 5
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	fb 87       	std	Y+11, r31	; 0x0b
     b68:	ea 87       	std	Y+10, r30	; 0x0a
     b6a:	f7 e0       	ldi	r31, 0x07	; 7
     b6c:	fc 87       	std	Y+12, r31	; 0x0c
     b6e:	ea 85       	ldd	r30, Y+10	; 0x0a
     b70:	fb 85       	ldd	r31, Y+11	; 0x0b
     b72:	00 80       	ld	r0, Z
     b74:	8a 85       	ldd	r24, Y+10	; 0x0a
     b76:	9b 85       	ldd	r25, Y+11	; 0x0b
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9b 87       	std	Y+11, r25	; 0x0b
     b7c:	8a 87       	std	Y+10, r24	; 0x0a
     b7e:	e8 85       	ldd	r30, Y+8	; 0x08
     b80:	f9 85       	ldd	r31, Y+9	; 0x09
     b82:	00 82       	st	Z, r0
     b84:	88 85       	ldd	r24, Y+8	; 0x08
     b86:	99 85       	ldd	r25, Y+9	; 0x09
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	99 87       	std	Y+9, r25	; 0x09
     b8c:	88 87       	std	Y+8, r24	; 0x08
     b8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9c 87       	std	Y+12, r25	; 0x0c
     b94:	ec 85       	ldd	r30, Y+12	; 0x0c
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <MC1_init+0x28>
	LCD_init();
     b9a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LCD_init>
	UART_init(&config);
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	0e 94 86 14 	call	0x290c	; 0x290c <UART_init>
}
     ba6:	2c 96       	adiw	r28, 0x0c	; 12
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <passwordCreate>:
 * 				the Control ECU do the checking if they match and send
 * 				the result of checking to it via UART and
 * 				if they don't match it keeps looping to take two passwords
 * 				that match
 */
void passwordCreate(void){
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	e5 97       	sbiw	r28, 0x35	; 53
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
	uint32 pass1=0,pass2=0;
     bcc:	1a aa       	std	Y+50, r1	; 0x32
     bce:	1b aa       	std	Y+51, r1	; 0x33
     bd0:	1c aa       	std	Y+52, r1	; 0x34
     bd2:	1d aa       	std	Y+53, r1	; 0x35
     bd4:	1e a6       	std	Y+46, r1	; 0x2e
     bd6:	1f a6       	std	Y+47, r1	; 0x2f
     bd8:	18 aa       	std	Y+48, r1	; 0x30
     bda:	19 aa       	std	Y+49, r1	; 0x31
	uint8 i=0,flag=0x00,key_pressed;
     bdc:	1d a6       	std	Y+45, r1	; 0x2d
     bde:	1c a6       	std	Y+44, r1	; 0x2c

	do{
		pass1=0;
     be0:	1a aa       	std	Y+50, r1	; 0x32
     be2:	1b aa       	std	Y+51, r1	; 0x33
     be4:	1c aa       	std	Y+52, r1	; 0x34
     be6:	1d aa       	std	Y+53, r1	; 0x35
		pass2=0;
     be8:	1e a6       	std	Y+46, r1	; 0x2e
     bea:	1f a6       	std	Y+47, r1	; 0x2f
     bec:	18 aa       	std	Y+48, r1	; 0x30
     bee:	19 aa       	std	Y+49, r1	; 0x31
		LCD_clearScreen();
     bf0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_clearScreen>
		LCD_moveCursor( 0, 0);
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
		LCD_displayString("PLZ Enter Pass:");
     bfc:	80 e6       	ldi	r24, 0x60	; 96
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>

		LCD_moveCursor( 1, 0);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
		for(i=0;i<5;i++){
     c0c:	1d a6       	std	Y+45, r1	; 0x2d
     c0e:	24 c0       	rjmp	.+72     	; 0xc58 <passwordCreate+0xa0>

			key_pressed=KEYPAD_getPressedKey();
     c10:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <KEYPAD_getPressedKey>
     c14:	8b a7       	std	Y+43, r24	; 0x2b
			pass1=(pass1*10)+key_pressed;
     c16:	8a a9       	ldd	r24, Y+50	; 0x32
     c18:	9b a9       	ldd	r25, Y+51	; 0x33
     c1a:	ac a9       	ldd	r26, Y+52	; 0x34
     c1c:	bd a9       	ldd	r27, Y+53	; 0x35
     c1e:	2a e0       	ldi	r18, 0x0A	; 10
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__mulsi3>
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	8b a5       	ldd	r24, Y+43	; 0x2b
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	82 0f       	add	r24, r18
     c3e:	93 1f       	adc	r25, r19
     c40:	a4 1f       	adc	r26, r20
     c42:	b5 1f       	adc	r27, r21
     c44:	8a ab       	std	Y+50, r24	; 0x32
     c46:	9b ab       	std	Y+51, r25	; 0x33
     c48:	ac ab       	std	Y+52, r26	; 0x34
     c4a:	bd ab       	std	Y+53, r27	; 0x35
			LCD_displayCharacter('*');
     c4c:	8a e2       	ldi	r24, 0x2A	; 42
     c4e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
		LCD_clearScreen();
		LCD_moveCursor( 0, 0);
		LCD_displayString("PLZ Enter Pass:");

		LCD_moveCursor( 1, 0);
		for(i=0;i<5;i++){
     c52:	8d a5       	ldd	r24, Y+45	; 0x2d
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	8d a7       	std	Y+45, r24	; 0x2d
     c58:	8d a5       	ldd	r24, Y+45	; 0x2d
     c5a:	85 30       	cpi	r24, 0x05	; 5
     c5c:	c8 f2       	brcs	.-78     	; 0xc10 <passwordCreate+0x58>
			key_pressed=KEYPAD_getPressedKey();
			pass1=(pass1*10)+key_pressed;
			LCD_displayCharacter('*');

		}
		while(KEYPAD_getPressedKey() != '=');
     c5e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <KEYPAD_getPressedKey>
     c62:	8d 33       	cpi	r24, 0x3D	; 61
     c64:	e1 f7       	brne	.-8      	; 0xc5e <passwordCreate+0xa6>
		sendPassword(pass1);
     c66:	8a a9       	ldd	r24, Y+50	; 0x32
     c68:	9b a9       	ldd	r25, Y+51	; 0x33
     c6a:	ac a9       	ldd	r26, Y+52	; 0x34
     c6c:	bd a9       	ldd	r27, Y+53	; 0x35
     c6e:	bc 01       	movw	r22, r24
     c70:	cd 01       	movw	r24, r26
     c72:	0e 94 12 08 	call	0x1024	; 0x1024 <sendPassword>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	a8 e4       	ldi	r26, 0x48	; 72
     c7c:	b3 e4       	ldi	r27, 0x43	; 67
     c7e:	8f a3       	std	Y+39, r24	; 0x27
     c80:	98 a7       	std	Y+40, r25	; 0x28
     c82:	a9 a7       	std	Y+41, r26	; 0x29
     c84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c86:	6f a1       	ldd	r22, Y+39	; 0x27
     c88:	78 a5       	ldd	r23, Y+40	; 0x28
     c8a:	89 a5       	ldd	r24, Y+41	; 0x29
     c8c:	9a a5       	ldd	r25, Y+42	; 0x2a
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	4a ef       	ldi	r20, 0xFA	; 250
     c94:	54 e4       	ldi	r21, 0x44	; 68
     c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	8b a3       	std	Y+35, r24	; 0x23
     ca0:	9c a3       	std	Y+36, r25	; 0x24
     ca2:	ad a3       	std	Y+37, r26	; 0x25
     ca4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ca6:	6b a1       	ldd	r22, Y+35	; 0x23
     ca8:	7c a1       	ldd	r23, Y+36	; 0x24
     caa:	8d a1       	ldd	r24, Y+37	; 0x25
     cac:	9e a1       	ldd	r25, Y+38	; 0x26
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	40 e8       	ldi	r20, 0x80	; 128
     cb4:	5f e3       	ldi	r21, 0x3F	; 63
     cb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cba:	88 23       	and	r24, r24
     cbc:	2c f4       	brge	.+10     	; 0xcc8 <passwordCreate+0x110>
		__ticks = 1;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	9a a3       	std	Y+34, r25	; 0x22
     cc4:	89 a3       	std	Y+33, r24	; 0x21
     cc6:	3f c0       	rjmp	.+126    	; 0xd46 <passwordCreate+0x18e>
	else if (__tmp > 65535)
     cc8:	6b a1       	ldd	r22, Y+35	; 0x23
     cca:	7c a1       	ldd	r23, Y+36	; 0x24
     ccc:	8d a1       	ldd	r24, Y+37	; 0x25
     cce:	9e a1       	ldd	r25, Y+38	; 0x26
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	3f ef       	ldi	r19, 0xFF	; 255
     cd4:	4f e7       	ldi	r20, 0x7F	; 127
     cd6:	57 e4       	ldi	r21, 0x47	; 71
     cd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cdc:	18 16       	cp	r1, r24
     cde:	4c f5       	brge	.+82     	; 0xd32 <passwordCreate+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce0:	6f a1       	ldd	r22, Y+39	; 0x27
     ce2:	78 a5       	ldd	r23, Y+40	; 0x28
     ce4:	89 a5       	ldd	r24, Y+41	; 0x29
     ce6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e2       	ldi	r20, 0x20	; 32
     cee:	51 e4       	ldi	r21, 0x41	; 65
     cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	bc 01       	movw	r22, r24
     cfa:	cd 01       	movw	r24, r26
     cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	9a a3       	std	Y+34, r25	; 0x22
     d06:	89 a3       	std	Y+33, r24	; 0x21
     d08:	0f c0       	rjmp	.+30     	; 0xd28 <passwordCreate+0x170>
     d0a:	88 ec       	ldi	r24, 0xC8	; 200
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	98 a3       	std	Y+32, r25	; 0x20
     d10:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d12:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d14:	98 a1       	ldd	r25, Y+32	; 0x20
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <passwordCreate+0x15e>
     d1a:	98 a3       	std	Y+32, r25	; 0x20
     d1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d1e:	89 a1       	ldd	r24, Y+33	; 0x21
     d20:	9a a1       	ldd	r25, Y+34	; 0x22
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	9a a3       	std	Y+34, r25	; 0x22
     d26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d28:	89 a1       	ldd	r24, Y+33	; 0x21
     d2a:	9a a1       	ldd	r25, Y+34	; 0x22
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	69 f7       	brne	.-38     	; 0xd0a <passwordCreate+0x152>
     d30:	14 c0       	rjmp	.+40     	; 0xd5a <passwordCreate+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d32:	6b a1       	ldd	r22, Y+35	; 0x23
     d34:	7c a1       	ldd	r23, Y+36	; 0x24
     d36:	8d a1       	ldd	r24, Y+37	; 0x25
     d38:	9e a1       	ldd	r25, Y+38	; 0x26
     d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	9a a3       	std	Y+34, r25	; 0x22
     d44:	89 a3       	std	Y+33, r24	; 0x21
     d46:	89 a1       	ldd	r24, Y+33	; 0x21
     d48:	9a a1       	ldd	r25, Y+34	; 0x22
     d4a:	9e 8f       	std	Y+30, r25	; 0x1e
     d4c:	8d 8f       	std	Y+29, r24	; 0x1d
     d4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d50:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	f1 f7       	brne	.-4      	; 0xd52 <passwordCreate+0x19a>
     d56:	9e 8f       	std	Y+30, r25	; 0x1e
     d58:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(200);
		LCD_clearScreen();
     d5a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_clearScreen>

		LCD_moveCursor( 0, 0);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
		LCD_displayString("PLZ re-enter the");
     d66:	80 e7       	ldi	r24, 0x70	; 112
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>
		LCD_moveCursor( 1, 0);
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
		LCD_displayString("same pass: ");
     d76:	81 e8       	ldi	r24, 0x81	; 129
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>

		for(i=0;i<5;i++){
     d7e:	1d a6       	std	Y+45, r1	; 0x2d
     d80:	24 c0       	rjmp	.+72     	; 0xdca <passwordCreate+0x212>
			key_pressed=KEYPAD_getPressedKey();
     d82:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <KEYPAD_getPressedKey>
     d86:	8b a7       	std	Y+43, r24	; 0x2b
			pass2=(pass2*10)+key_pressed;
     d88:	8e a5       	ldd	r24, Y+46	; 0x2e
     d8a:	9f a5       	ldd	r25, Y+47	; 0x2f
     d8c:	a8 a9       	ldd	r26, Y+48	; 0x30
     d8e:	b9 a9       	ldd	r27, Y+49	; 0x31
     d90:	2a e0       	ldi	r18, 0x0A	; 10
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__mulsi3>
     da0:	9b 01       	movw	r18, r22
     da2:	ac 01       	movw	r20, r24
     da4:	8b a5       	ldd	r24, Y+43	; 0x2b
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a0 e0       	ldi	r26, 0x00	; 0
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	a4 1f       	adc	r26, r20
     db4:	b5 1f       	adc	r27, r21
     db6:	8e a7       	std	Y+46, r24	; 0x2e
     db8:	9f a7       	std	Y+47, r25	; 0x2f
     dba:	a8 ab       	std	Y+48, r26	; 0x30
     dbc:	b9 ab       	std	Y+49, r27	; 0x31
			LCD_displayCharacter('*');
     dbe:	8a e2       	ldi	r24, 0x2A	; 42
     dc0:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
		LCD_moveCursor( 0, 0);
		LCD_displayString("PLZ re-enter the");
		LCD_moveCursor( 1, 0);
		LCD_displayString("same pass: ");

		for(i=0;i<5;i++){
     dc4:	8d a5       	ldd	r24, Y+45	; 0x2d
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	8d a7       	std	Y+45, r24	; 0x2d
     dca:	8d a5       	ldd	r24, Y+45	; 0x2d
     dcc:	85 30       	cpi	r24, 0x05	; 5
     dce:	c8 f2       	brcs	.-78     	; 0xd82 <passwordCreate+0x1ca>
			key_pressed=KEYPAD_getPressedKey();
			pass2=(pass2*10)+key_pressed;
			LCD_displayCharacter('*');
		}
		while(KEYPAD_getPressedKey() != '=');
     dd0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <KEYPAD_getPressedKey>
     dd4:	8d 33       	cpi	r24, 0x3D	; 61
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <passwordCreate+0x218>
		sendPassword(pass2);
     dd8:	8e a5       	ldd	r24, Y+46	; 0x2e
     dda:	9f a5       	ldd	r25, Y+47	; 0x2f
     ddc:	a8 a9       	ldd	r26, Y+48	; 0x30
     dde:	b9 a9       	ldd	r27, Y+49	; 0x31
     de0:	bc 01       	movw	r22, r24
     de2:	cd 01       	movw	r24, r26
     de4:	0e 94 12 08 	call	0x1024	; 0x1024 <sendPassword>

		flag=UART_recieveByte();
     de8:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <UART_recieveByte>
     dec:	8c a7       	std	Y+44, r24	; 0x2c

		if (flag==0x10){
     dee:	8c a5       	ldd	r24, Y+44	; 0x2c
     df0:	80 31       	cpi	r24, 0x10	; 16
     df2:	59 f4       	brne	.+22     	; 0xe0a <passwordCreate+0x252>

			LCD_clearScreen();
     df4:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_clearScreen>
			LCD_moveCursor( 0, 0);
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
			LCD_displayString("Password created");
     e00:	8d e8       	ldi	r24, 0x8D	; 141
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>
     e08:	84 c0       	rjmp	.+264    	; 0xf12 <passwordCreate+0x35a>
		}

		else{

			LCD_clearScreen();
     e0a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_clearScreen>
			LCD_moveCursor( 0, 0);
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
			LCD_displayString("Passwords don't");
     e16:	8e e9       	ldi	r24, 0x9E	; 158
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>
			LCD_moveCursor( 1, 0);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
			LCD_displayString("Match");
     e26:	8e ea       	ldi	r24, 0xAE	; 174
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	aa e7       	ldi	r26, 0x7A	; 122
     e34:	b4 e4       	ldi	r27, 0x44	; 68
     e36:	89 8f       	std	Y+25, r24	; 0x19
     e38:	9a 8f       	std	Y+26, r25	; 0x1a
     e3a:	ab 8f       	std	Y+27, r26	; 0x1b
     e3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3e:	69 8d       	ldd	r22, Y+25	; 0x19
     e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	4a ef       	ldi	r20, 0xFA	; 250
     e4c:	54 e4       	ldi	r21, 0x44	; 68
     e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	8d 8b       	std	Y+21, r24	; 0x15
     e58:	9e 8b       	std	Y+22, r25	; 0x16
     e5a:	af 8b       	std	Y+23, r26	; 0x17
     e5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e5e:	6d 89       	ldd	r22, Y+21	; 0x15
     e60:	7e 89       	ldd	r23, Y+22	; 0x16
     e62:	8f 89       	ldd	r24, Y+23	; 0x17
     e64:	98 8d       	ldd	r25, Y+24	; 0x18
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e72:	88 23       	and	r24, r24
     e74:	2c f4       	brge	.+10     	; 0xe80 <passwordCreate+0x2c8>
		__ticks = 1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9c 8b       	std	Y+20, r25	; 0x14
     e7c:	8b 8b       	std	Y+19, r24	; 0x13
     e7e:	3f c0       	rjmp	.+126    	; 0xefe <passwordCreate+0x346>
	else if (__tmp > 65535)
     e80:	6d 89       	ldd	r22, Y+21	; 0x15
     e82:	7e 89       	ldd	r23, Y+22	; 0x16
     e84:	8f 89       	ldd	r24, Y+23	; 0x17
     e86:	98 8d       	ldd	r25, Y+24	; 0x18
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	4f e7       	ldi	r20, 0x7F	; 127
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e94:	18 16       	cp	r1, r24
     e96:	4c f5       	brge	.+82     	; 0xeea <passwordCreate+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e98:	69 8d       	ldd	r22, Y+25	; 0x19
     e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	9c 8b       	std	Y+20, r25	; 0x14
     ebe:	8b 8b       	std	Y+19, r24	; 0x13
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <passwordCreate+0x328>
     ec2:	88 ec       	ldi	r24, 0xC8	; 200
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9a 8b       	std	Y+18, r25	; 0x12
     ec8:	89 8b       	std	Y+17, r24	; 0x11
     eca:	89 89       	ldd	r24, Y+17	; 0x11
     ecc:	9a 89       	ldd	r25, Y+18	; 0x12
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <passwordCreate+0x316>
     ed2:	9a 8b       	std	Y+18, r25	; 0x12
     ed4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	8b 89       	ldd	r24, Y+19	; 0x13
     ed8:	9c 89       	ldd	r25, Y+20	; 0x14
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	9c 8b       	std	Y+20, r25	; 0x14
     ede:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	8b 89       	ldd	r24, Y+19	; 0x13
     ee2:	9c 89       	ldd	r25, Y+20	; 0x14
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	69 f7       	brne	.-38     	; 0xec2 <passwordCreate+0x30a>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <passwordCreate+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eea:	6d 89       	ldd	r22, Y+21	; 0x15
     eec:	7e 89       	ldd	r23, Y+22	; 0x16
     eee:	8f 89       	ldd	r24, Y+23	; 0x17
     ef0:	98 8d       	ldd	r25, Y+24	; 0x18
     ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9c 8b       	std	Y+20, r25	; 0x14
     efc:	8b 8b       	std	Y+19, r24	; 0x13
     efe:	8b 89       	ldd	r24, Y+19	; 0x13
     f00:	9c 89       	ldd	r25, Y+20	; 0x14
     f02:	98 8b       	std	Y+16, r25	; 0x10
     f04:	8f 87       	std	Y+15, r24	; 0x0f
     f06:	8f 85       	ldd	r24, Y+15	; 0x0f
     f08:	98 89       	ldd	r25, Y+16	; 0x10
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <passwordCreate+0x352>
     f0e:	98 8b       	std	Y+16, r25	; 0x10
     f10:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
		}
	}while (flag != 0x10);
     f12:	8c a5       	ldd	r24, Y+44	; 0x2c
     f14:	80 31       	cpi	r24, 0x10	; 16
     f16:	09 f0       	breq	.+2      	; 0xf1a <passwordCreate+0x362>
     f18:	63 ce       	rjmp	.-826    	; 0xbe0 <passwordCreate+0x28>
	LCD_clearScreen();
     f1a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_clearScreen>
	LCD_moveCursor( 0, 0);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
	LCD_displayString("Password Created");
     f26:	84 eb       	ldi	r24, 0xB4	; 180
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a6 e1       	ldi	r26, 0x16	; 22
     f34:	b4 e4       	ldi	r27, 0x44	; 68
     f36:	8b 87       	std	Y+11, r24	; 0x0b
     f38:	9c 87       	std	Y+12, r25	; 0x0c
     f3a:	ad 87       	std	Y+13, r26	; 0x0d
     f3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f40:	7c 85       	ldd	r23, Y+12	; 0x0c
     f42:	8d 85       	ldd	r24, Y+13	; 0x0d
     f44:	9e 85       	ldd	r25, Y+14	; 0x0e
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	4a ef       	ldi	r20, 0xFA	; 250
     f4c:	54 e4       	ldi	r21, 0x44	; 68
     f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	8f 83       	std	Y+7, r24	; 0x07
     f58:	98 87       	std	Y+8, r25	; 0x08
     f5a:	a9 87       	std	Y+9, r26	; 0x09
     f5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f5e:	6f 81       	ldd	r22, Y+7	; 0x07
     f60:	78 85       	ldd	r23, Y+8	; 0x08
     f62:	89 85       	ldd	r24, Y+9	; 0x09
     f64:	9a 85       	ldd	r25, Y+10	; 0x0a
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e8       	ldi	r20, 0x80	; 128
     f6c:	5f e3       	ldi	r21, 0x3F	; 63
     f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f72:	88 23       	and	r24, r24
     f74:	2c f4       	brge	.+10     	; 0xf80 <passwordCreate+0x3c8>
		__ticks = 1;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9e 83       	std	Y+6, r25	; 0x06
     f7c:	8d 83       	std	Y+5, r24	; 0x05
     f7e:	3f c0       	rjmp	.+126    	; 0xffe <passwordCreate+0x446>
	else if (__tmp > 65535)
     f80:	6f 81       	ldd	r22, Y+7	; 0x07
     f82:	78 85       	ldd	r23, Y+8	; 0x08
     f84:	89 85       	ldd	r24, Y+9	; 0x09
     f86:	9a 85       	ldd	r25, Y+10	; 0x0a
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	3f ef       	ldi	r19, 0xFF	; 255
     f8c:	4f e7       	ldi	r20, 0x7F	; 127
     f8e:	57 e4       	ldi	r21, 0x47	; 71
     f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f94:	18 16       	cp	r1, r24
     f96:	4c f5       	brge	.+82     	; 0xfea <passwordCreate+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f98:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e2       	ldi	r20, 0x20	; 32
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	9e 83       	std	Y+6, r25	; 0x06
     fbe:	8d 83       	std	Y+5, r24	; 0x05
     fc0:	0f c0       	rjmp	.+30     	; 0xfe0 <passwordCreate+0x428>
     fc2:	88 ec       	ldi	r24, 0xC8	; 200
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9c 83       	std	Y+4, r25	; 0x04
     fc8:	8b 83       	std	Y+3, r24	; 0x03
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <passwordCreate+0x416>
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	9e 81       	ldd	r25, Y+6	; 0x06
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	9e 81       	ldd	r25, Y+6	; 0x06
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	69 f7       	brne	.-38     	; 0xfc2 <passwordCreate+0x40a>
     fe8:	14 c0       	rjmp	.+40     	; 0x1012 <passwordCreate+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fea:	6f 81       	ldd	r22, Y+7	; 0x07
     fec:	78 85       	ldd	r23, Y+8	; 0x08
     fee:	89 85       	ldd	r24, Y+9	; 0x09
     ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9e 83       	std	Y+6, r25	; 0x06
     ffc:	8d 83       	std	Y+5, r24	; 0x05
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	9a 83       	std	Y+2, r25	; 0x02
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	9a 81       	ldd	r25, Y+2	; 0x02
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <passwordCreate+0x452>
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(600);
}
    1012:	e5 96       	adiw	r28, 0x35	; 53
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <sendPassword>:
 * 				This Function is responsible for sending a password
 * 				to Control_ECU via UART. It takes integer value (i.e password)
 * 				and convert it to a string of ASCIIs and send the string via
 * 				UART
 */
void sendPassword(uint32 data){
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	60 97       	sbiw	r28, 0x10	; 16
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	6d 87       	std	Y+13, r22	; 0x0d
    103e:	7e 87       	std	Y+14, r23	; 0x0e
    1040:	8f 87       	std	Y+15, r24	; 0x0f
    1042:	98 8b       	std	Y+16, r25	; 0x10
	uint8 buff[10];

	for(int i=4;i>=0;i--){
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9a 83       	std	Y+2, r25	; 0x02
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	2f c0       	rjmp	.+94     	; 0x10ac <sendPassword+0x88>
		buff[i]=(data%10)+48;
    104e:	09 81       	ldd	r16, Y+1	; 0x01
    1050:	1a 81       	ldd	r17, Y+2	; 0x02
    1052:	8d 85       	ldd	r24, Y+13	; 0x0d
    1054:	9e 85       	ldd	r25, Y+14	; 0x0e
    1056:	af 85       	ldd	r26, Y+15	; 0x0f
    1058:	b8 89       	ldd	r27, Y+16	; 0x10
    105a:	2a e0       	ldi	r18, 0x0A	; 10
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__udivmodsi4>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	28 2f       	mov	r18, r24
    1070:	20 5d       	subi	r18, 0xD0	; 208
    1072:	ce 01       	movw	r24, r28
    1074:	03 96       	adiw	r24, 0x03	; 3
    1076:	fc 01       	movw	r30, r24
    1078:	e0 0f       	add	r30, r16
    107a:	f1 1f       	adc	r31, r17
    107c:	20 83       	st	Z, r18
		data=data/10;
    107e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1080:	9e 85       	ldd	r25, Y+14	; 0x0e
    1082:	af 85       	ldd	r26, Y+15	; 0x0f
    1084:	b8 89       	ldd	r27, Y+16	; 0x10
    1086:	2a e0       	ldi	r18, 0x0A	; 10
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__udivmodsi4>
    1096:	da 01       	movw	r26, r20
    1098:	c9 01       	movw	r24, r18
    109a:	8d 87       	std	Y+13, r24	; 0x0d
    109c:	9e 87       	std	Y+14, r25	; 0x0e
    109e:	af 87       	std	Y+15, r26	; 0x0f
    10a0:	b8 8b       	std	Y+16, r27	; 0x10
 * 				UART
 */
void sendPassword(uint32 data){
	uint8 buff[10];

	for(int i=4;i>=0;i--){
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	99 23       	and	r25, r25
    10b2:	6c f6       	brge	.-102    	; 0x104e <sendPassword+0x2a>
		buff[i]=(data%10)+48;
		data=data/10;
	}
	buff[5]='\0';
    10b4:	18 86       	std	Y+8, r1	; 0x08
	UART_sendString(buff);
    10b6:	ce 01       	movw	r24, r28
    10b8:	03 96       	adiw	r24, 0x03	; 3
    10ba:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <UART_sendString>
	UART_sendByte('#');
    10be:	83 e2       	ldi	r24, 0x23	; 35
    10c0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <UART_sendByte>
}
    10c4:	60 96       	adiw	r28, 0x10	; 16
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <mainMenu>:
 * 				control ECU via UART and waits for the response of Control ECU
 * 				whether the password entered by user matches the saved one,
 *
 * 				if it matches it calls the function corresponding to the user choice
 */
void mainMenu(void){
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	64 97       	sbiw	r28, 0x14	; 20
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
	uint8 key_press=0,i=0,check;
    10ee:	1a 8a       	std	Y+18, r1	; 0x12
    10f0:	19 8a       	std	Y+17, r1	; 0x11
	LCD_clearScreen();
    10f2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_clearScreen>
	LCD_moveCursor( 0, 0);
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
	LCD_displayString("+: Open Door");
    10fe:	85 ec       	ldi	r24, 0xC5	; 197
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>
	LCD_moveCursor( 1, 0);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
	LCD_displayString("-: Change Pass");
    110e:	82 ed       	ldi	r24, 0xD2	; 210
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>
	do{
		key_press = KEYPAD_getPressedKey();
    1116:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <KEYPAD_getPressedKey>
    111a:	8a 8b       	std	Y+18, r24	; 0x12
	}while((key_press !='+') && (key_press !='-'));
    111c:	8a 89       	ldd	r24, Y+18	; 0x12
    111e:	8b 32       	cpi	r24, 0x2B	; 43
    1120:	19 f0       	breq	.+6      	; 0x1128 <mainMenu+0x4e>
    1122:	8a 89       	ldd	r24, Y+18	; 0x12
    1124:	8d 32       	cpi	r24, 0x2D	; 45
    1126:	b9 f7       	brne	.-18     	; 0x1116 <mainMenu+0x3c>

	do{
		check=checkIfPasswordIsCorrect();
    1128:	0e 94 57 09 	call	0x12ae	; 0x12ae <checkIfPasswordIsCorrect>
    112c:	88 8b       	std	Y+16, r24	; 0x10
		if(check){
    112e:	88 89       	ldd	r24, Y+16	; 0x10
    1130:	88 23       	and	r24, r24
    1132:	31 f4       	brne	.+12     	; 0x1140 <mainMenu+0x66>
			break;
		}
		i++;
    1134:	89 89       	ldd	r24, Y+17	; 0x11
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	89 8b       	std	Y+17, r24	; 0x11
	}while(i<3);
    113a:	89 89       	ldd	r24, Y+17	; 0x11
    113c:	83 30       	cpi	r24, 0x03	; 3
    113e:	a0 f3       	brcs	.-24     	; 0x1128 <mainMenu+0x4e>

	if(!check){
    1140:	88 89       	ldd	r24, Y+16	; 0x10
    1142:	88 23       	and	r24, r24
    1144:	09 f0       	breq	.+2      	; 0x1148 <mainMenu+0x6e>
    1146:	8c c0       	rjmp	.+280    	; 0x1260 <mainMenu+0x186>
		LCD_clearScreen();
    1148:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_clearScreen>
		LCD_moveCursor( 0, 0);
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
		LCD_displayString("System Locked");
    1154:	81 ee       	ldi	r24, 0xE1	; 225
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>
		UART_sendByte('O');
    115c:	8f e4       	ldi	r24, 0x4F	; 79
    115e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <UART_sendByte>
		for(uint8 i=0;i<60;i++){
    1162:	1f 86       	std	Y+15, r1	; 0x0f
    1164:	75 c0       	rjmp	.+234    	; 0x1250 <mainMenu+0x176>
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	aa e7       	ldi	r26, 0x7A	; 122
    116c:	b4 e4       	ldi	r27, 0x44	; 68
    116e:	8b 87       	std	Y+11, r24	; 0x0b
    1170:	9c 87       	std	Y+12, r25	; 0x0c
    1172:	ad 87       	std	Y+13, r26	; 0x0d
    1174:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1176:	6b 85       	ldd	r22, Y+11	; 0x0b
    1178:	7c 85       	ldd	r23, Y+12	; 0x0c
    117a:	8d 85       	ldd	r24, Y+13	; 0x0d
    117c:	9e 85       	ldd	r25, Y+14	; 0x0e
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	4a ef       	ldi	r20, 0xFA	; 250
    1184:	54 e4       	ldi	r21, 0x44	; 68
    1186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	8f 83       	std	Y+7, r24	; 0x07
    1190:	98 87       	std	Y+8, r25	; 0x08
    1192:	a9 87       	std	Y+9, r26	; 0x09
    1194:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1196:	6f 81       	ldd	r22, Y+7	; 0x07
    1198:	78 85       	ldd	r23, Y+8	; 0x08
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e8       	ldi	r20, 0x80	; 128
    11a4:	5f e3       	ldi	r21, 0x3F	; 63
    11a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11aa:	88 23       	and	r24, r24
    11ac:	2c f4       	brge	.+10     	; 0x11b8 <mainMenu+0xde>
		__ticks = 1;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9e 83       	std	Y+6, r25	; 0x06
    11b4:	8d 83       	std	Y+5, r24	; 0x05
    11b6:	3f c0       	rjmp	.+126    	; 0x1236 <mainMenu+0x15c>
	else if (__tmp > 65535)
    11b8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ba:	78 85       	ldd	r23, Y+8	; 0x08
    11bc:	89 85       	ldd	r24, Y+9	; 0x09
    11be:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	3f ef       	ldi	r19, 0xFF	; 255
    11c4:	4f e7       	ldi	r20, 0x7F	; 127
    11c6:	57 e4       	ldi	r21, 0x47	; 71
    11c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11cc:	18 16       	cp	r1, r24
    11ce:	4c f5       	brge	.+82     	; 0x1222 <mainMenu+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e2       	ldi	r20, 0x20	; 32
    11de:	51 e4       	ldi	r21, 0x41	; 65
    11e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
    11f8:	0f c0       	rjmp	.+30     	; 0x1218 <mainMenu+0x13e>
    11fa:	88 ec       	ldi	r24, 0xC8	; 200
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9c 83       	std	Y+4, r25	; 0x04
    1200:	8b 83       	std	Y+3, r24	; 0x03
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <mainMenu+0x12c>
    120a:	9c 83       	std	Y+4, r25	; 0x04
    120c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	9e 83       	std	Y+6, r25	; 0x06
    1216:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	69 f7       	brne	.-38     	; 0x11fa <mainMenu+0x120>
    1220:	14 c0       	rjmp	.+40     	; 0x124a <mainMenu+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1222:	6f 81       	ldd	r22, Y+7	; 0x07
    1224:	78 85       	ldd	r23, Y+8	; 0x08
    1226:	89 85       	ldd	r24, Y+9	; 0x09
    1228:	9a 85       	ldd	r25, Y+10	; 0x0a
    122a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	9e 83       	std	Y+6, r25	; 0x06
    1234:	8d 83       	std	Y+5, r24	; 0x05
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	9a 83       	std	Y+2, r25	; 0x02
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <mainMenu+0x168>
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	8f 85       	ldd	r24, Y+15	; 0x0f
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	8f 87       	std	Y+15, r24	; 0x0f
    1250:	8f 85       	ldd	r24, Y+15	; 0x0f
    1252:	8c 33       	cpi	r24, 0x3C	; 60
    1254:	08 f4       	brcc	.+2      	; 0x1258 <mainMenu+0x17e>
    1256:	87 cf       	rjmp	.-242    	; 0x1166 <mainMenu+0x8c>
			_delay_ms(1000);
		}
		UART_sendByte('o');
    1258:	8f e6       	ldi	r24, 0x6F	; 111
    125a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <UART_sendByte>
    125e:	1e c0       	rjmp	.+60     	; 0x129c <mainMenu+0x1c2>
	}
	else{
		switch(key_press){
    1260:	8a 89       	ldd	r24, Y+18	; 0x12
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	3c 8b       	std	Y+20, r19	; 0x14
    1268:	2b 8b       	std	Y+19, r18	; 0x13
    126a:	8b 89       	ldd	r24, Y+19	; 0x13
    126c:	9c 89       	ldd	r25, Y+20	; 0x14
    126e:	8b 32       	cpi	r24, 0x2B	; 43
    1270:	91 05       	cpc	r25, r1
    1272:	31 f0       	breq	.+12     	; 0x1280 <mainMenu+0x1a6>
    1274:	2b 89       	ldd	r18, Y+19	; 0x13
    1276:	3c 89       	ldd	r19, Y+20	; 0x14
    1278:	2d 32       	cpi	r18, 0x2D	; 45
    127a:	31 05       	cpc	r19, r1
    127c:	51 f0       	breq	.+20     	; 0x1292 <mainMenu+0x1b8>
    127e:	0e c0       	rjmp	.+28     	; 0x129c <mainMenu+0x1c2>
		case '+':
			openDoor();
    1280:	0e 94 bd 09 	call	0x137a	; 0x137a <openDoor>
			while(g_timerTick!=23);
    1284:	80 91 1e 01 	lds	r24, 0x011E
    1288:	87 31       	cpi	r24, 0x17	; 23
    128a:	e1 f7       	brne	.-8      	; 0x1284 <mainMenu+0x1aa>
			g_timerTick=0;
    128c:	10 92 1e 01 	sts	0x011E, r1
    1290:	05 c0       	rjmp	.+10     	; 0x129c <mainMenu+0x1c2>
			break;
		case '-':
			UART_sendByte('Z');
    1292:	8a e5       	ldi	r24, 0x5A	; 90
    1294:	0e 94 94 15 	call	0x2b28	; 0x2b28 <UART_sendByte>
			passwordCreate();
    1298:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <passwordCreate>
			break;
		}
	}

}
    129c:	64 96       	adiw	r28, 0x14	; 20
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <checkIfPasswordIsCorrect>:
 * Description:
 * 				This is the Function that takes the input password from
 * 				the user and sends it to control ECU. this function returns
 * 				true if password matches saved one
 */
uint8 checkIfPasswordIsCorrect(void){
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	27 97       	sbiw	r28, 0x07	; 7
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte('S');
    12c2:	83 e5       	ldi	r24, 0x53	; 83
    12c4:	0e 94 94 15 	call	0x2b28	; 0x2b28 <UART_sendByte>
	uint8 key_pressed;
	uint32 pass=0;
    12c8:	1a 82       	std	Y+2, r1	; 0x02
    12ca:	1b 82       	std	Y+3, r1	; 0x03
    12cc:	1c 82       	std	Y+4, r1	; 0x04
    12ce:	1d 82       	std	Y+5, r1	; 0x05
	LCD_clearScreen();
    12d0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_clearScreen>
	LCD_moveCursor( 0, 0);
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
	LCD_displayString("PLZ Enter Pass:");
    12dc:	80 e6       	ldi	r24, 0x60	; 96
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>

	LCD_moveCursor( 1, 0);
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
	for(uint8 i=0;i<5;i++){
    12ec:	19 82       	std	Y+1, r1	; 0x01
    12ee:	24 c0       	rjmp	.+72     	; 0x1338 <checkIfPasswordIsCorrect+0x8a>

		key_pressed=KEYPAD_getPressedKey();
    12f0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <KEYPAD_getPressedKey>
    12f4:	8e 83       	std	Y+6, r24	; 0x06
		pass=(pass*10)+key_pressed;
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	ac 81       	ldd	r26, Y+4	; 0x04
    12fc:	bd 81       	ldd	r27, Y+5	; 0x05
    12fe:	2a e0       	ldi	r18, 0x0A	; 10
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__mulsi3>
    130e:	9b 01       	movw	r18, r22
    1310:	ac 01       	movw	r20, r24
    1312:	8e 81       	ldd	r24, Y+6	; 0x06
    1314:	88 2f       	mov	r24, r24
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a0 e0       	ldi	r26, 0x00	; 0
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	82 0f       	add	r24, r18
    131e:	93 1f       	adc	r25, r19
    1320:	a4 1f       	adc	r26, r20
    1322:	b5 1f       	adc	r27, r21
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	9b 83       	std	Y+3, r25	; 0x03
    1328:	ac 83       	std	Y+4, r26	; 0x04
    132a:	bd 83       	std	Y+5, r27	; 0x05
		LCD_displayCharacter('*');
    132c:	8a e2       	ldi	r24, 0x2A	; 42
    132e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
	LCD_clearScreen();
	LCD_moveCursor( 0, 0);
	LCD_displayString("PLZ Enter Pass:");

	LCD_moveCursor( 1, 0);
	for(uint8 i=0;i<5;i++){
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	85 30       	cpi	r24, 0x05	; 5
    133c:	c8 f2       	brcs	.-78     	; 0x12f0 <checkIfPasswordIsCorrect+0x42>

		key_pressed=KEYPAD_getPressedKey();
		pass=(pass*10)+key_pressed;
		LCD_displayCharacter('*');
	}
	while(KEYPAD_getPressedKey() != '=');
    133e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <KEYPAD_getPressedKey>
    1342:	8d 33       	cpi	r24, 0x3D	; 61
    1344:	e1 f7       	brne	.-8      	; 0x133e <checkIfPasswordIsCorrect+0x90>
	sendPassword(pass);
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	9b 81       	ldd	r25, Y+3	; 0x03
    134a:	ac 81       	ldd	r26, Y+4	; 0x04
    134c:	bd 81       	ldd	r27, Y+5	; 0x05
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 12 08 	call	0x1024	; 0x1024 <sendPassword>
	if(UART_recieveByte()== 0xff){
    1356:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <UART_recieveByte>
    135a:	8f 3f       	cpi	r24, 0xFF	; 255
    135c:	19 f4       	brne	.+6      	; 0x1364 <checkIfPasswordIsCorrect+0xb6>
		return 1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	8f 83       	std	Y+7, r24	; 0x07
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <checkIfPasswordIsCorrect+0xb8>
	}
	return 0;
    1364:	1f 82       	std	Y+7, r1	; 0x07
    1366:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1368:	27 96       	adiw	r28, 0x07	; 7
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <openDoor>:
 * 				This Function initiates timer 1 to count 15 seconds and
 * 				sets the callback function to TIMER_callBack() that manipulates
 * 				the timing of opening and closing the door
 * 				and sends to the Control ECU command to start rotating the motor
 */
void openDoor(void){
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	2b 97       	sbiw	r28, 0x0b	; 11
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    138e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
	LCD_displayString("Door Opened!!");
    139a:	8f ee       	ldi	r24, 0xEF	; 239
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>
	Timer1_ConfigType Config_Ptr={0,50000,F_CPU_256,compare};
    13a2:	ce 01       	movw	r24, r28
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	98 87       	std	Y+8, r25	; 0x08
    13a8:	8f 83       	std	Y+7, r24	; 0x07
    13aa:	ec e0       	ldi	r30, 0x0C	; 12
    13ac:	f1 e0       	ldi	r31, 0x01	; 1
    13ae:	fa 87       	std	Y+10, r31	; 0x0a
    13b0:	e9 87       	std	Y+9, r30	; 0x09
    13b2:	f6 e0       	ldi	r31, 0x06	; 6
    13b4:	fb 87       	std	Y+11, r31	; 0x0b
    13b6:	e9 85       	ldd	r30, Y+9	; 0x09
    13b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    13ba:	00 80       	ld	r0, Z
    13bc:	89 85       	ldd	r24, Y+9	; 0x09
    13be:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	9a 87       	std	Y+10, r25	; 0x0a
    13c4:	89 87       	std	Y+9, r24	; 0x09
    13c6:	ef 81       	ldd	r30, Y+7	; 0x07
    13c8:	f8 85       	ldd	r31, Y+8	; 0x08
    13ca:	00 82       	st	Z, r0
    13cc:	8f 81       	ldd	r24, Y+7	; 0x07
    13ce:	98 85       	ldd	r25, Y+8	; 0x08
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	98 87       	std	Y+8, r25	; 0x08
    13d4:	8f 83       	std	Y+7, r24	; 0x07
    13d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d8:	91 50       	subi	r25, 0x01	; 1
    13da:	9b 87       	std	Y+11, r25	; 0x0b
    13dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    13de:	ee 23       	and	r30, r30
    13e0:	51 f7       	brne	.-44     	; 0x13b6 <openDoor+0x3c>
	Timer1_init(& Config_Ptr);
    13e2:	ce 01       	movw	r24, r28
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <Timer1_init>
	Timer1_setCallBack(&TIMER_callBack);
    13ea:	85 e0       	ldi	r24, 0x05	; 5
    13ec:	9a e0       	ldi	r25, 0x0A	; 10
    13ee:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <Timer1_setCallBack>
	UART_sendByte('Q');
    13f2:	81 e5       	ldi	r24, 0x51	; 81
    13f4:	0e 94 94 15 	call	0x2b28	; 0x2b28 <UART_sendByte>

}
    13f8:	2b 96       	adiw	r28, 0x0b	; 11
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <TIMER_callBack>:
 * 				command of turning off the motor (3-seconds) and then
 * 				rotating the motor ACW for (15-seconds) and finally
 * 				sending the command to end the process to the control
 * 				ECU
 */
void TIMER_callBack(void){
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	66 97       	sbiw	r28, 0x16	; 22
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
	g_timerTick++;
    141e:	80 91 1e 01 	lds	r24, 0x011E
    1422:	8f 5f       	subi	r24, 0xFF	; 255
    1424:	80 93 1e 01 	sts	0x011E, r24

	if(g_timerTick==10){
    1428:	80 91 1e 01 	lds	r24, 0x011E
    142c:	8a 30       	cpi	r24, 0x0A	; 10
    142e:	41 f5       	brne	.+80     	; 0x1480 <TIMER_callBack+0x76>
		Timer1_ConfigType Config_Ptr={0,30000,F_CPU_256,compare};
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	9e 87       	std	Y+14, r25	; 0x0e
    1436:	8d 87       	std	Y+13, r24	; 0x0d
    1438:	e8 e1       	ldi	r30, 0x18	; 24
    143a:	f1 e0       	ldi	r31, 0x01	; 1
    143c:	f8 8b       	std	Y+16, r31	; 0x10
    143e:	ef 87       	std	Y+15, r30	; 0x0f
    1440:	f6 e0       	ldi	r31, 0x06	; 6
    1442:	f9 8b       	std	Y+17, r31	; 0x11
    1444:	ef 85       	ldd	r30, Y+15	; 0x0f
    1446:	f8 89       	ldd	r31, Y+16	; 0x10
    1448:	00 80       	ld	r0, Z
    144a:	8f 85       	ldd	r24, Y+15	; 0x0f
    144c:	98 89       	ldd	r25, Y+16	; 0x10
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	98 8b       	std	Y+16, r25	; 0x10
    1452:	8f 87       	std	Y+15, r24	; 0x0f
    1454:	ed 85       	ldd	r30, Y+13	; 0x0d
    1456:	fe 85       	ldd	r31, Y+14	; 0x0e
    1458:	00 82       	st	Z, r0
    145a:	8d 85       	ldd	r24, Y+13	; 0x0d
    145c:	9e 85       	ldd	r25, Y+14	; 0x0e
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	9e 87       	std	Y+14, r25	; 0x0e
    1462:	8d 87       	std	Y+13, r24	; 0x0d
    1464:	99 89       	ldd	r25, Y+17	; 0x11
    1466:	91 50       	subi	r25, 0x01	; 1
    1468:	99 8b       	std	Y+17, r25	; 0x11
    146a:	e9 89       	ldd	r30, Y+17	; 0x11
    146c:	ee 23       	and	r30, r30
    146e:	51 f7       	brne	.-44     	; 0x1444 <TIMER_callBack+0x3a>
		Timer1_init(& Config_Ptr);
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <Timer1_init>
		UART_sendByte('W');
    1478:	87 e5       	ldi	r24, 0x57	; 87
    147a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <UART_sendByte>
    147e:	35 c0       	rjmp	.+106    	; 0x14ea <TIMER_callBack+0xe0>
	}
	else if(g_timerTick==13){
    1480:	80 91 1e 01 	lds	r24, 0x011E
    1484:	8d 30       	cpi	r24, 0x0D	; 13
    1486:	41 f5       	brne	.+80     	; 0x14d8 <TIMER_callBack+0xce>
		Timer1_ConfigType Config_Ptr={0,50000,F_CPU_256,compare};
    1488:	ce 01       	movw	r24, r28
    148a:	07 96       	adiw	r24, 0x07	; 7
    148c:	9b 8b       	std	Y+19, r25	; 0x13
    148e:	8a 8b       	std	Y+18, r24	; 0x12
    1490:	e2 e1       	ldi	r30, 0x12	; 18
    1492:	f1 e0       	ldi	r31, 0x01	; 1
    1494:	fd 8b       	std	Y+21, r31	; 0x15
    1496:	ec 8b       	std	Y+20, r30	; 0x14
    1498:	f6 e0       	ldi	r31, 0x06	; 6
    149a:	fe 8b       	std	Y+22, r31	; 0x16
    149c:	ec 89       	ldd	r30, Y+20	; 0x14
    149e:	fd 89       	ldd	r31, Y+21	; 0x15
    14a0:	00 80       	ld	r0, Z
    14a2:	8c 89       	ldd	r24, Y+20	; 0x14
    14a4:	9d 89       	ldd	r25, Y+21	; 0x15
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	9d 8b       	std	Y+21, r25	; 0x15
    14aa:	8c 8b       	std	Y+20, r24	; 0x14
    14ac:	ea 89       	ldd	r30, Y+18	; 0x12
    14ae:	fb 89       	ldd	r31, Y+19	; 0x13
    14b0:	00 82       	st	Z, r0
    14b2:	8a 89       	ldd	r24, Y+18	; 0x12
    14b4:	9b 89       	ldd	r25, Y+19	; 0x13
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	9b 8b       	std	Y+19, r25	; 0x13
    14ba:	8a 8b       	std	Y+18, r24	; 0x12
    14bc:	9e 89       	ldd	r25, Y+22	; 0x16
    14be:	91 50       	subi	r25, 0x01	; 1
    14c0:	9e 8b       	std	Y+22, r25	; 0x16
    14c2:	ee 89       	ldd	r30, Y+22	; 0x16
    14c4:	ee 23       	and	r30, r30
    14c6:	51 f7       	brne	.-44     	; 0x149c <TIMER_callBack+0x92>
		Timer1_init(& Config_Ptr);
    14c8:	ce 01       	movw	r24, r28
    14ca:	07 96       	adiw	r24, 0x07	; 7
    14cc:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <Timer1_init>
		UART_sendByte('X');
    14d0:	88 e5       	ldi	r24, 0x58	; 88
    14d2:	0e 94 94 15 	call	0x2b28	; 0x2b28 <UART_sendByte>
    14d6:	09 c0       	rjmp	.+18     	; 0x14ea <TIMER_callBack+0xe0>
	}
	else if(g_timerTick==23){
    14d8:	80 91 1e 01 	lds	r24, 0x011E
    14dc:	87 31       	cpi	r24, 0x17	; 23
    14de:	29 f4       	brne	.+10     	; 0x14ea <TIMER_callBack+0xe0>
		Timer1_deInit();
    14e0:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Timer1_deInit>
		UART_sendByte('Y');
    14e4:	89 e5       	ldi	r24, 0x59	; 89
    14e6:	0e 94 94 15 	call	0x2b28	; 0x2b28 <UART_sendByte>
	}


}
    14ea:	66 96       	adiw	r28, 0x16	; 22
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <main>:
 * Main function for HMI_ECU:
 * 					This function calls the initialization function of
 * 					the MC, then calls the function to create the password.
 * 					and in the super loop it just calls the main-program.
 */
int main(void){
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
	 MC1_init();
    1504:	0e 94 a3 05 	call	0xb46	; 0xb46 <MC1_init>

	 passwordCreate();
    1508:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <passwordCreate>

	 while(1){
		 mainMenu();
    150c:	0e 94 6d 08 	call	0x10da	; 0x10da <mainMenu>
    1510:	fd cf       	rjmp	.-6      	; 0x150c <main+0x10>

00001512 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <GPIO_setupPinDirection+0x6>
    1518:	00 d0       	rcall	.+0      	; 0x151a <GPIO_setupPinDirection+0x8>
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	6a 83       	std	Y+2, r22	; 0x02
    1524:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	88 30       	cpi	r24, 0x08	; 8
    152a:	08 f0       	brcs	.+2      	; 0x152e <GPIO_setupPinDirection+0x1c>
    152c:	d5 c0       	rjmp	.+426    	; 0x16d8 <GPIO_setupPinDirection+0x1c6>
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	08 f0       	brcs	.+2      	; 0x1536 <GPIO_setupPinDirection+0x24>
    1534:	d1 c0       	rjmp	.+418    	; 0x16d8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3d 83       	std	Y+5, r19	; 0x05
    153e:	2c 83       	std	Y+4, r18	; 0x04
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	91 05       	cpc	r25, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <GPIO_setupPinDirection+0x3a>
    154a:	43 c0       	rjmp	.+134    	; 0x15d2 <GPIO_setupPinDirection+0xc0>
    154c:	2c 81       	ldd	r18, Y+4	; 0x04
    154e:	3d 81       	ldd	r19, Y+5	; 0x05
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	2c f4       	brge	.+10     	; 0x1560 <GPIO_setupPinDirection+0x4e>
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	71 f0       	breq	.+28     	; 0x157a <GPIO_setupPinDirection+0x68>
    155e:	bc c0       	rjmp	.+376    	; 0x16d8 <GPIO_setupPinDirection+0x1c6>
    1560:	2c 81       	ldd	r18, Y+4	; 0x04
    1562:	3d 81       	ldd	r19, Y+5	; 0x05
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <GPIO_setupPinDirection+0x5a>
    156a:	5f c0       	rjmp	.+190    	; 0x162a <GPIO_setupPinDirection+0x118>
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	91 05       	cpc	r25, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <GPIO_setupPinDirection+0x66>
    1576:	85 c0       	rjmp	.+266    	; 0x1682 <GPIO_setupPinDirection+0x170>
    1578:	af c0       	rjmp	.+350    	; 0x16d8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	a1 f4       	brne	.+40     	; 0x15a8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1580:	aa e3       	ldi	r26, 0x3A	; 58
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	ea e3       	ldi	r30, 0x3A	; 58
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <GPIO_setupPinDirection+0x8c>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <GPIO_setupPinDirection+0x88>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	98 c0       	rjmp	.+304    	; 0x16d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15a8:	aa e3       	ldi	r26, 0x3A	; 58
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ea e3       	ldi	r30, 0x3A	; 58
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <GPIO_setupPinDirection+0xb4>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <GPIO_setupPinDirection+0xb0>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	83 c0       	rjmp	.+262    	; 0x16d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	a1 f4       	brne	.+40     	; 0x1600 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15d8:	a7 e3       	ldi	r26, 0x37	; 55
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e7 e3       	ldi	r30, 0x37	; 55
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <GPIO_setupPinDirection+0xe4>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <GPIO_setupPinDirection+0xe0>
    15fa:	84 2b       	or	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	6c c0       	rjmp	.+216    	; 0x16d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1600:	a7 e3       	ldi	r26, 0x37	; 55
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e7 e3       	ldi	r30, 0x37	; 55
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <GPIO_setupPinDirection+0x10c>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <GPIO_setupPinDirection+0x108>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	57 c0       	rjmp	.+174    	; 0x16d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	a1 f4       	brne	.+40     	; 0x1658 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1630:	a4 e3       	ldi	r26, 0x34	; 52
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e4 e3       	ldi	r30, 0x34	; 52
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <GPIO_setupPinDirection+0x13c>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <GPIO_setupPinDirection+0x138>
    1652:	84 2b       	or	r24, r20
    1654:	8c 93       	st	X, r24
    1656:	40 c0       	rjmp	.+128    	; 0x16d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1658:	a4 e3       	ldi	r26, 0x34	; 52
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e4 e3       	ldi	r30, 0x34	; 52
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <GPIO_setupPinDirection+0x164>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <GPIO_setupPinDirection+0x160>
    167a:	80 95       	com	r24
    167c:	84 23       	and	r24, r20
    167e:	8c 93       	st	X, r24
    1680:	2b c0       	rjmp	.+86     	; 0x16d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	a1 f4       	brne	.+40     	; 0x16b0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1688:	a1 e3       	ldi	r26, 0x31	; 49
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e1 e3       	ldi	r30, 0x31	; 49
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <GPIO_setupPinDirection+0x194>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <GPIO_setupPinDirection+0x190>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16b0:	a1 e3       	ldi	r26, 0x31	; 49
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e1 e3       	ldi	r30, 0x31	; 49
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <GPIO_setupPinDirection+0x1bc>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <GPIO_setupPinDirection+0x1b8>
    16d2:	80 95       	com	r24
    16d4:	84 23       	and	r24, r20
    16d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <GPIO_writePin+0x6>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <GPIO_writePin+0x8>
    16f0:	0f 92       	push	r0
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	6a 83       	std	Y+2, r22	; 0x02
    16fa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	88 30       	cpi	r24, 0x08	; 8
    1700:	08 f0       	brcs	.+2      	; 0x1704 <GPIO_writePin+0x1c>
    1702:	d5 c0       	rjmp	.+426    	; 0x18ae <GPIO_writePin+0x1c6>
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	08 f0       	brcs	.+2      	; 0x170c <GPIO_writePin+0x24>
    170a:	d1 c0       	rjmp	.+418    	; 0x18ae <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	3d 83       	std	Y+5, r19	; 0x05
    1714:	2c 83       	std	Y+4, r18	; 0x04
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	9d 81       	ldd	r25, Y+5	; 0x05
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	91 05       	cpc	r25, r1
    171e:	09 f4       	brne	.+2      	; 0x1722 <GPIO_writePin+0x3a>
    1720:	43 c0       	rjmp	.+134    	; 0x17a8 <GPIO_writePin+0xc0>
    1722:	2c 81       	ldd	r18, Y+4	; 0x04
    1724:	3d 81       	ldd	r19, Y+5	; 0x05
    1726:	22 30       	cpi	r18, 0x02	; 2
    1728:	31 05       	cpc	r19, r1
    172a:	2c f4       	brge	.+10     	; 0x1736 <GPIO_writePin+0x4e>
    172c:	8c 81       	ldd	r24, Y+4	; 0x04
    172e:	9d 81       	ldd	r25, Y+5	; 0x05
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	71 f0       	breq	.+28     	; 0x1750 <GPIO_writePin+0x68>
    1734:	bc c0       	rjmp	.+376    	; 0x18ae <GPIO_writePin+0x1c6>
    1736:	2c 81       	ldd	r18, Y+4	; 0x04
    1738:	3d 81       	ldd	r19, Y+5	; 0x05
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	09 f4       	brne	.+2      	; 0x1742 <GPIO_writePin+0x5a>
    1740:	5f c0       	rjmp	.+190    	; 0x1800 <GPIO_writePin+0x118>
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	9d 81       	ldd	r25, Y+5	; 0x05
    1746:	83 30       	cpi	r24, 0x03	; 3
    1748:	91 05       	cpc	r25, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <GPIO_writePin+0x66>
    174c:	85 c0       	rjmp	.+266    	; 0x1858 <GPIO_writePin+0x170>
    174e:	af c0       	rjmp	.+350    	; 0x18ae <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	a1 f4       	brne	.+40     	; 0x177e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1756:	ab e3       	ldi	r26, 0x3B	; 59
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	eb e3       	ldi	r30, 0x3B	; 59
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <GPIO_writePin+0x8c>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <GPIO_writePin+0x88>
    1778:	84 2b       	or	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	98 c0       	rjmp	.+304    	; 0x18ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    177e:	ab e3       	ldi	r26, 0x3B	; 59
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	eb e3       	ldi	r30, 0x3B	; 59
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <GPIO_writePin+0xb4>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <GPIO_writePin+0xb0>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	83 c0       	rjmp	.+262    	; 0x18ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	a1 f4       	brne	.+40     	; 0x17d6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    17ae:	a8 e3       	ldi	r26, 0x38	; 56
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e8 e3       	ldi	r30, 0x38	; 56
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_writePin+0xe4>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_writePin+0xe0>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	6c c0       	rjmp	.+216    	; 0x18ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    17d6:	a8 e3       	ldi	r26, 0x38	; 56
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e8 e3       	ldi	r30, 0x38	; 56
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <GPIO_writePin+0x10c>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <GPIO_writePin+0x108>
    17f8:	80 95       	com	r24
    17fa:	84 23       	and	r24, r20
    17fc:	8c 93       	st	X, r24
    17fe:	57 c0       	rjmp	.+174    	; 0x18ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	a1 f4       	brne	.+40     	; 0x182e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1806:	a5 e3       	ldi	r26, 0x35	; 53
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e5 e3       	ldi	r30, 0x35	; 53
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <GPIO_writePin+0x13c>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <GPIO_writePin+0x138>
    1828:	84 2b       	or	r24, r20
    182a:	8c 93       	st	X, r24
    182c:	40 c0       	rjmp	.+128    	; 0x18ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    182e:	a5 e3       	ldi	r26, 0x35	; 53
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e3       	ldi	r30, 0x35	; 53
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <GPIO_writePin+0x164>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <GPIO_writePin+0x160>
    1850:	80 95       	com	r24
    1852:	84 23       	and	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	2b c0       	rjmp	.+86     	; 0x18ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	a1 f4       	brne	.+40     	; 0x1886 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    185e:	a2 e3       	ldi	r26, 0x32	; 50
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e2 e3       	ldi	r30, 0x32	; 50
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 2e       	mov	r0, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <GPIO_writePin+0x194>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <GPIO_writePin+0x190>
    1880:	84 2b       	or	r24, r20
    1882:	8c 93       	st	X, r24
    1884:	14 c0       	rjmp	.+40     	; 0x18ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1886:	a2 e3       	ldi	r26, 0x32	; 50
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e2 e3       	ldi	r30, 0x32	; 50
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 2e       	mov	r0, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <GPIO_writePin+0x1bc>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <GPIO_writePin+0x1b8>
    18a8:	80 95       	com	r24
    18aa:	84 23       	and	r24, r20
    18ac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <GPIO_readPin+0x6>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <GPIO_readPin+0x8>
    18c6:	0f 92       	push	r0
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	8a 83       	std	Y+2, r24	; 0x02
    18ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    18d0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	88 30       	cpi	r24, 0x08	; 8
    18d6:	08 f0       	brcs	.+2      	; 0x18da <GPIO_readPin+0x1c>
    18d8:	84 c0       	rjmp	.+264    	; 0x19e2 <GPIO_readPin+0x124>
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	84 30       	cpi	r24, 0x04	; 4
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <GPIO_readPin+0x24>
    18e0:	80 c0       	rjmp	.+256    	; 0x19e2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	3d 83       	std	Y+5, r19	; 0x05
    18ea:	2c 83       	std	Y+4, r18	; 0x04
    18ec:	4c 81       	ldd	r20, Y+4	; 0x04
    18ee:	5d 81       	ldd	r21, Y+5	; 0x05
    18f0:	41 30       	cpi	r20, 0x01	; 1
    18f2:	51 05       	cpc	r21, r1
    18f4:	79 f1       	breq	.+94     	; 0x1954 <GPIO_readPin+0x96>
    18f6:	8c 81       	ldd	r24, Y+4	; 0x04
    18f8:	9d 81       	ldd	r25, Y+5	; 0x05
    18fa:	82 30       	cpi	r24, 0x02	; 2
    18fc:	91 05       	cpc	r25, r1
    18fe:	34 f4       	brge	.+12     	; 0x190c <GPIO_readPin+0x4e>
    1900:	2c 81       	ldd	r18, Y+4	; 0x04
    1902:	3d 81       	ldd	r19, Y+5	; 0x05
    1904:	21 15       	cp	r18, r1
    1906:	31 05       	cpc	r19, r1
    1908:	69 f0       	breq	.+26     	; 0x1924 <GPIO_readPin+0x66>
    190a:	6b c0       	rjmp	.+214    	; 0x19e2 <GPIO_readPin+0x124>
    190c:	4c 81       	ldd	r20, Y+4	; 0x04
    190e:	5d 81       	ldd	r21, Y+5	; 0x05
    1910:	42 30       	cpi	r20, 0x02	; 2
    1912:	51 05       	cpc	r21, r1
    1914:	b9 f1       	breq	.+110    	; 0x1984 <GPIO_readPin+0xc6>
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	9d 81       	ldd	r25, Y+5	; 0x05
    191a:	83 30       	cpi	r24, 0x03	; 3
    191c:	91 05       	cpc	r25, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <GPIO_readPin+0x64>
    1920:	49 c0       	rjmp	.+146    	; 0x19b4 <GPIO_readPin+0xf6>
    1922:	5f c0       	rjmp	.+190    	; 0x19e2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1924:	e9 e3       	ldi	r30, 0x39	; 57
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a9 01       	movw	r20, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <GPIO_readPin+0x7e>
    1938:	55 95       	asr	r21
    193a:	47 95       	ror	r20
    193c:	8a 95       	dec	r24
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <GPIO_readPin+0x7a>
    1940:	ca 01       	movw	r24, r20
    1942:	81 70       	andi	r24, 0x01	; 1
    1944:	90 70       	andi	r25, 0x00	; 0
    1946:	88 23       	and	r24, r24
    1948:	19 f0       	breq	.+6      	; 0x1950 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	49 c0       	rjmp	.+146    	; 0x19e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1950:	19 82       	std	Y+1, r1	; 0x01
    1952:	47 c0       	rjmp	.+142    	; 0x19e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1954:	e6 e3       	ldi	r30, 0x36	; 54
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	a9 01       	movw	r20, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <GPIO_readPin+0xae>
    1968:	55 95       	asr	r21
    196a:	47 95       	ror	r20
    196c:	8a 95       	dec	r24
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <GPIO_readPin+0xaa>
    1970:	ca 01       	movw	r24, r20
    1972:	81 70       	andi	r24, 0x01	; 1
    1974:	90 70       	andi	r25, 0x00	; 0
    1976:	88 23       	and	r24, r24
    1978:	19 f0       	breq	.+6      	; 0x1980 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	31 c0       	rjmp	.+98     	; 0x19e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1980:	19 82       	std	Y+1, r1	; 0x01
    1982:	2f c0       	rjmp	.+94     	; 0x19e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1984:	e3 e3       	ldi	r30, 0x33	; 51
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a9 01       	movw	r20, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <GPIO_readPin+0xde>
    1998:	55 95       	asr	r21
    199a:	47 95       	ror	r20
    199c:	8a 95       	dec	r24
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <GPIO_readPin+0xda>
    19a0:	ca 01       	movw	r24, r20
    19a2:	81 70       	andi	r24, 0x01	; 1
    19a4:	90 70       	andi	r25, 0x00	; 0
    19a6:	88 23       	and	r24, r24
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	19 c0       	rjmp	.+50     	; 0x19e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19b0:	19 82       	std	Y+1, r1	; 0x01
    19b2:	17 c0       	rjmp	.+46     	; 0x19e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    19b4:	e0 e3       	ldi	r30, 0x30	; 48
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a9 01       	movw	r20, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <GPIO_readPin+0x10e>
    19c8:	55 95       	asr	r21
    19ca:	47 95       	ror	r20
    19cc:	8a 95       	dec	r24
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <GPIO_readPin+0x10a>
    19d0:	ca 01       	movw	r24, r20
    19d2:	81 70       	andi	r24, 0x01	; 1
    19d4:	90 70       	andi	r25, 0x00	; 0
    19d6:	88 23       	and	r24, r24
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19e0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <GPIO_setupPortDirection+0x6>
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <GPIO_setupPortDirection+0x8>
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	84 30       	cpi	r24, 0x04	; 4
    1a08:	90 f5       	brcc	.+100    	; 0x1a6e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3c 83       	std	Y+4, r19	; 0x04
    1a12:	2b 83       	std	Y+3, r18	; 0x03
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	d1 f0       	breq	.+52     	; 0x1a52 <GPIO_setupPortDirection+0x5e>
    1a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a20:	3c 81       	ldd	r19, Y+4	; 0x04
    1a22:	22 30       	cpi	r18, 0x02	; 2
    1a24:	31 05       	cpc	r19, r1
    1a26:	2c f4       	brge	.+10     	; 0x1a32 <GPIO_setupPortDirection+0x3e>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	61 f0       	breq	.+24     	; 0x1a48 <GPIO_setupPortDirection+0x54>
    1a30:	1e c0       	rjmp	.+60     	; 0x1a6e <GPIO_setupPortDirection+0x7a>
    1a32:	2b 81       	ldd	r18, Y+3	; 0x03
    1a34:	3c 81       	ldd	r19, Y+4	; 0x04
    1a36:	22 30       	cpi	r18, 0x02	; 2
    1a38:	31 05       	cpc	r19, r1
    1a3a:	81 f0       	breq	.+32     	; 0x1a5c <GPIO_setupPortDirection+0x68>
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	83 30       	cpi	r24, 0x03	; 3
    1a42:	91 05       	cpc	r25, r1
    1a44:	81 f0       	breq	.+32     	; 0x1a66 <GPIO_setupPortDirection+0x72>
    1a46:	13 c0       	rjmp	.+38     	; 0x1a6e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a48:	ea e3       	ldi	r30, 0x3A	; 58
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	80 83       	st	Z, r24
    1a50:	0e c0       	rjmp	.+28     	; 0x1a6e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a52:	e7 e3       	ldi	r30, 0x37	; 55
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	80 83       	st	Z, r24
    1a5a:	09 c0       	rjmp	.+18     	; 0x1a6e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a5c:	e4 e3       	ldi	r30, 0x34	; 52
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	80 83       	st	Z, r24
    1a64:	04 c0       	rjmp	.+8      	; 0x1a6e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a66:	e1 e3       	ldi	r30, 0x31	; 49
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <GPIO_writePort+0x6>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <GPIO_writePort+0x8>
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	84 30       	cpi	r24, 0x04	; 4
    1a90:	90 f5       	brcc	.+100    	; 0x1af6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	3c 83       	std	Y+4, r19	; 0x04
    1a9a:	2b 83       	std	Y+3, r18	; 0x03
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	d1 f0       	breq	.+52     	; 0x1ada <GPIO_writePort+0x5e>
    1aa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	2c f4       	brge	.+10     	; 0x1aba <GPIO_writePort+0x3e>
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	61 f0       	breq	.+24     	; 0x1ad0 <GPIO_writePort+0x54>
    1ab8:	1e c0       	rjmp	.+60     	; 0x1af6 <GPIO_writePort+0x7a>
    1aba:	2b 81       	ldd	r18, Y+3	; 0x03
    1abc:	3c 81       	ldd	r19, Y+4	; 0x04
    1abe:	22 30       	cpi	r18, 0x02	; 2
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	81 f0       	breq	.+32     	; 0x1ae4 <GPIO_writePort+0x68>
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	83 30       	cpi	r24, 0x03	; 3
    1aca:	91 05       	cpc	r25, r1
    1acc:	81 f0       	breq	.+32     	; 0x1aee <GPIO_writePort+0x72>
    1ace:	13 c0       	rjmp	.+38     	; 0x1af6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ad0:	eb e3       	ldi	r30, 0x3B	; 59
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	80 83       	st	Z, r24
    1ad8:	0e c0       	rjmp	.+28     	; 0x1af6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ada:	e8 e3       	ldi	r30, 0x38	; 56
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	80 83       	st	Z, r24
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ae4:	e5 e3       	ldi	r30, 0x35	; 53
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	80 83       	st	Z, r24
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1aee:	e2 e3       	ldi	r30, 0x32	; 50
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <GPIO_readPort+0x6>
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <GPIO_readPort+0x8>
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b12:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	84 30       	cpi	r24, 0x04	; 4
    1b18:	90 f5       	brcc	.+100    	; 0x1b7e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	3c 83       	std	Y+4, r19	; 0x04
    1b22:	2b 83       	std	Y+3, r18	; 0x03
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	d1 f0       	breq	.+52     	; 0x1b62 <GPIO_readPort+0x5e>
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <GPIO_readPort+0x3e>
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	61 f0       	breq	.+24     	; 0x1b58 <GPIO_readPort+0x54>
    1b40:	1e c0       	rjmp	.+60     	; 0x1b7e <GPIO_readPort+0x7a>
    1b42:	2b 81       	ldd	r18, Y+3	; 0x03
    1b44:	3c 81       	ldd	r19, Y+4	; 0x04
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	81 f0       	breq	.+32     	; 0x1b6c <GPIO_readPort+0x68>
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	83 30       	cpi	r24, 0x03	; 3
    1b52:	91 05       	cpc	r25, r1
    1b54:	81 f0       	breq	.+32     	; 0x1b76 <GPIO_readPort+0x72>
    1b56:	13 c0       	rjmp	.+38     	; 0x1b7e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b58:	e9 e3       	ldi	r30, 0x39	; 57
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	0e c0       	rjmp	.+28     	; 0x1b7e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b62:	e6 e3       	ldi	r30, 0x36	; 54
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	09 c0       	rjmp	.+18     	; 0x1b7e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b6c:	e3 e3       	ldi	r30, 0x33	; 51
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	04 c0       	rjmp	.+8      	; 0x1b7e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b76:	e0 e3       	ldi	r30, 0x30	; 48
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	60 97       	sbiw	r28, 0x10	; 16
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	61 e0       	ldi	r22, 0x01	; 1
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	62 e0       	ldi	r22, 0x02	; 2
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	63 e0       	ldi	r22, 0x03	; 3
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	64 e0       	ldi	r22, 0x04	; 4
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	65 e0       	ldi	r22, 0x05	; 5
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	66 e0       	ldi	r22, 0x06	; 6
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	67 e0       	ldi	r22, 0x07	; 7
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1bf2:	1f 86       	std	Y+15, r1	; 0x0f
    1bf4:	b4 c0       	rjmp	.+360    	; 0x1d5e <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bfa:	41 e0       	ldi	r20, 0x01	; 1
    1bfc:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c0a:	18 8a       	std	Y+16, r1	; 0x10
    1c0c:	2b c0       	rjmp	.+86     	; 0x1c64 <KEYPAD_getPressedKey+0xd6>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1c0e:	88 89       	ldd	r24, Y+16	; 0x10
    1c10:	98 2f       	mov	r25, r24
    1c12:	9c 5f       	subi	r25, 0xFC	; 252
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	69 2f       	mov	r22, r25
    1c18:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_readPin>
    1c1c:	88 23       	and	r24, r24
    1c1e:	f9 f4       	brne	.+62     	; 0x1c5e <KEYPAD_getPressedKey+0xd0>
				{
					while(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED){}
    1c20:	88 89       	ldd	r24, Y+16	; 0x10
    1c22:	98 2f       	mov	r25, r24
    1c24:	9c 5f       	subi	r25, 0xFC	; 252
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	69 2f       	mov	r22, r25
    1c2a:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_readPin>
    1c2e:	88 23       	and	r24, r24
    1c30:	b9 f3       	breq	.-18     	; 0x1c20 <KEYPAD_getPressedKey+0x92>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1c32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	98 2f       	mov	r25, r24
    1c42:	88 89       	ldd	r24, Y+16	; 0x10
    1c44:	89 0f       	add	r24, r25
    1c46:	8f 5f       	subi	r24, 0xFF	; 255
    1c48:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(20); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1c4c:	60 96       	adiw	r28, 0x10	; 16
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c5e:	88 89       	ldd	r24, Y+16	; 0x10
    1c60:	8f 5f       	subi	r24, 0xFF	; 255
    1c62:	88 8b       	std	Y+16, r24	; 0x10
    1c64:	88 89       	ldd	r24, Y+16	; 0x10
    1c66:	84 30       	cpi	r24, 0x04	; 4
    1c68:	90 f2       	brcs	.-92     	; 0x1c0e <KEYPAD_getPressedKey+0x80>
						#endif
					#endif

				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	a0 ea       	ldi	r26, 0xA0	; 160
    1c7a:	b1 e4       	ldi	r27, 0x41	; 65
    1c7c:	8b 87       	std	Y+11, r24	; 0x0b
    1c7e:	9c 87       	std	Y+12, r25	; 0x0c
    1c80:	ad 87       	std	Y+13, r26	; 0x0d
    1c82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	4a ef       	ldi	r20, 0xFA	; 250
    1c92:	54 e4       	ldi	r21, 0x44	; 68
    1c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	8f 83       	std	Y+7, r24	; 0x07
    1c9e:	98 87       	std	Y+8, r25	; 0x08
    1ca0:	a9 87       	std	Y+9, r26	; 0x09
    1ca2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e8       	ldi	r20, 0x80	; 128
    1cb2:	5f e3       	ldi	r21, 0x3F	; 63
    1cb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb8:	88 23       	and	r24, r24
    1cba:	2c f4       	brge	.+10     	; 0x1cc6 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
    1cc4:	3f c0       	rjmp	.+126    	; 0x1d44 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	3f ef       	ldi	r19, 0xFF	; 255
    1cd2:	4f e7       	ldi	r20, 0x7F	; 127
    1cd4:	57 e4       	ldi	r21, 0x47	; 71
    1cd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cda:	18 16       	cp	r1, r24
    1cdc:	4c f5       	brge	.+82     	; 0x1d30 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e2       	ldi	r20, 0x20	; 32
    1cec:	51 e4       	ldi	r21, 0x41	; 65
    1cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	bc 01       	movw	r22, r24
    1cf8:	cd 01       	movw	r24, r26
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
    1d06:	0f c0       	rjmp	.+30     	; 0x1d26 <KEYPAD_getPressedKey+0x198>
    1d08:	88 ec       	ldi	r24, 0xC8	; 200
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9c 83       	std	Y+4, r25	; 0x04
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <KEYPAD_getPressedKey+0x186>
    1d18:	9c 83       	std	Y+4, r25	; 0x04
    1d1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	69 f7       	brne	.-38     	; 0x1d08 <KEYPAD_getPressedKey+0x17a>
    1d2e:	14 c0       	rjmp	.+40     	; 0x1d58 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <KEYPAD_getPressedKey+0x1c2>
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5a:	8f 5f       	subi	r24, 0xFF	; 255
    1d5c:	8f 87       	std	Y+15, r24	; 0x0f
    1d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d60:	84 30       	cpi	r24, 0x04	; 4
    1d62:	08 f4       	brcc	.+2      	; 0x1d66 <KEYPAD_getPressedKey+0x1d8>
    1d64:	48 cf       	rjmp	.-368    	; 0x1bf6 <KEYPAD_getPressedKey+0x68>
    1d66:	45 cf       	rjmp	.-374    	; 0x1bf2 <KEYPAD_getPressedKey+0x64>

00001d68 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d76:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	3c 83       	std	Y+4, r19	; 0x04
    1d80:	2b 83       	std	Y+3, r18	; 0x03
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	88 30       	cpi	r24, 0x08	; 8
    1d88:	91 05       	cpc	r25, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d8c:	70 c0       	rjmp	.+224    	; 0x1e6e <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d90:	3c 81       	ldd	r19, Y+4	; 0x04
    1d92:	29 30       	cpi	r18, 0x09	; 9
    1d94:	31 05       	cpc	r19, r1
    1d96:	5c f5       	brge	.+86     	; 0x1dee <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	84 30       	cpi	r24, 0x04	; 4
    1d9e:	91 05       	cpc	r25, r1
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1da2:	59 c0       	rjmp	.+178    	; 0x1e56 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1da4:	2b 81       	ldd	r18, Y+3	; 0x03
    1da6:	3c 81       	ldd	r19, Y+4	; 0x04
    1da8:	25 30       	cpi	r18, 0x05	; 5
    1daa:	31 05       	cpc	r19, r1
    1dac:	9c f4       	brge	.+38     	; 0x1dd4 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	82 30       	cpi	r24, 0x02	; 2
    1db4:	91 05       	cpc	r25, r1
    1db6:	09 f4       	brne	.+2      	; 0x1dba <KEYPAD_4x4_adjustKeyNumber+0x52>
    1db8:	48 c0       	rjmp	.+144    	; 0x1e4a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1dba:	2b 81       	ldd	r18, Y+3	; 0x03
    1dbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbe:	23 30       	cpi	r18, 0x03	; 3
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	0c f0       	brlt	.+2      	; 0x1dc6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1dc4:	45 c0       	rjmp	.+138    	; 0x1e50 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	91 05       	cpc	r25, r1
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1dd0:	39 c0       	rjmp	.+114    	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1dd2:	67 c0       	rjmp	.+206    	; 0x1ea2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1dd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd8:	26 30       	cpi	r18, 0x06	; 6
    1dda:	31 05       	cpc	r19, r1
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1dde:	41 c0       	rjmp	.+130    	; 0x1e62 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	87 30       	cpi	r24, 0x07	; 7
    1de6:	91 05       	cpc	r25, r1
    1de8:	0c f0       	brlt	.+2      	; 0x1dec <KEYPAD_4x4_adjustKeyNumber+0x84>
    1dea:	3e c0       	rjmp	.+124    	; 0x1e68 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1dec:	37 c0       	rjmp	.+110    	; 0x1e5c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1dee:	2b 81       	ldd	r18, Y+3	; 0x03
    1df0:	3c 81       	ldd	r19, Y+4	; 0x04
    1df2:	2c 30       	cpi	r18, 0x0C	; 12
    1df4:	31 05       	cpc	r19, r1
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <KEYPAD_4x4_adjustKeyNumber+0x92>
    1df8:	46 c0       	rjmp	.+140    	; 0x1e86 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	8d 30       	cpi	r24, 0x0D	; 13
    1e00:	91 05       	cpc	r25, r1
    1e02:	5c f4       	brge	.+22     	; 0x1e1a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e04:	2b 81       	ldd	r18, Y+3	; 0x03
    1e06:	3c 81       	ldd	r19, Y+4	; 0x04
    1e08:	2a 30       	cpi	r18, 0x0A	; 10
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	b1 f1       	breq	.+108    	; 0x1e7a <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	8b 30       	cpi	r24, 0x0B	; 11
    1e14:	91 05       	cpc	r25, r1
    1e16:	a4 f5       	brge	.+104    	; 0x1e80 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e18:	2d c0       	rjmp	.+90     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	2e 30       	cpi	r18, 0x0E	; 14
    1e20:	31 05       	cpc	r19, r1
    1e22:	b9 f1       	breq	.+110    	; 0x1e92 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	8e 30       	cpi	r24, 0x0E	; 14
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	7c f1       	brlt	.+94     	; 0x1e8c <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e30:	3c 81       	ldd	r19, Y+4	; 0x04
    1e32:	2f 30       	cpi	r18, 0x0F	; 15
    1e34:	31 05       	cpc	r19, r1
    1e36:	79 f1       	breq	.+94     	; 0x1e96 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	80 31       	cpi	r24, 0x10	; 16
    1e3e:	91 05       	cpc	r25, r1
    1e40:	69 f1       	breq	.+90     	; 0x1e9c <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e42:	2f c0       	rjmp	.+94     	; 0x1ea2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1e44:	87 e0       	ldi	r24, 0x07	; 7
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	2e c0       	rjmp	.+92     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1e4a:	88 e0       	ldi	r24, 0x08	; 8
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	2b c0       	rjmp	.+86     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1e50:	89 e0       	ldi	r24, 0x09	; 9
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	28 c0       	rjmp	.+80     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1e56:	85 e2       	ldi	r24, 0x25	; 37
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	25 c0       	rjmp	.+74     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1e5c:	84 e0       	ldi	r24, 0x04	; 4
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	22 c0       	rjmp	.+68     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e62:	85 e0       	ldi	r24, 0x05	; 5
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	1f c0       	rjmp	.+62     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e68:	86 e0       	ldi	r24, 0x06	; 6
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	1c c0       	rjmp	.+56     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e6e:	8a e2       	ldi	r24, 0x2A	; 42
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	19 c0       	rjmp	.+50     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	16 c0       	rjmp	.+44     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	13 c0       	rjmp	.+38     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e80:	83 e0       	ldi	r24, 0x03	; 3
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	10 c0       	rjmp	.+32     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e86:	8d e2       	ldi	r24, 0x2D	; 45
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	0d c0       	rjmp	.+26     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e8c:	8d e0       	ldi	r24, 0x0D	; 13
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	0a c0       	rjmp	.+20     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1e92:	19 82       	std	Y+1, r1	; 0x01
    1e94:	08 c0       	rjmp	.+16     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e96:	8d e3       	ldi	r24, 0x3D	; 61
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	05 c0       	rjmp	.+10     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e9c:	8b e2       	ldi	r24, 0x2B	; 43
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	2e 97       	sbiw	r28, 0x0e	; 14
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1eca:	83 e0       	ldi	r24, 0x03	; 3
    1ecc:	64 e0       	ldi	r22, 0x04	; 4
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	65 e0       	ldi	r22, 0x05	; 5
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_setupPinDirection>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ee4:	b1 e4       	ldi	r27, 0x41	; 65
    1ee6:	8b 87       	std	Y+11, r24	; 0x0b
    1ee8:	9c 87       	std	Y+12, r25	; 0x0c
    1eea:	ad 87       	std	Y+13, r26	; 0x0d
    1eec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4a ef       	ldi	r20, 0xFA	; 250
    1efc:	54 e4       	ldi	r21, 0x44	; 68
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	8f 83       	std	Y+7, r24	; 0x07
    1f08:	98 87       	std	Y+8, r25	; 0x08
    1f0a:	a9 87       	std	Y+9, r26	; 0x09
    1f0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f10:	78 85       	ldd	r23, Y+8	; 0x08
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e8       	ldi	r20, 0x80	; 128
    1f1c:	5f e3       	ldi	r21, 0x3F	; 63
    1f1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f22:	88 23       	and	r24, r24
    1f24:	2c f4       	brge	.+10     	; 0x1f30 <LCD_init+0x7a>
		__ticks = 1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	3f c0       	rjmp	.+126    	; 0x1fae <LCD_init+0xf8>
	else if (__tmp > 65535)
    1f30:	6f 81       	ldd	r22, Y+7	; 0x07
    1f32:	78 85       	ldd	r23, Y+8	; 0x08
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	3f ef       	ldi	r19, 0xFF	; 255
    1f3c:	4f e7       	ldi	r20, 0x7F	; 127
    1f3e:	57 e4       	ldi	r21, 0x47	; 71
    1f40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f44:	18 16       	cp	r1, r24
    1f46:	4c f5       	brge	.+82     	; 0x1f9a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e2       	ldi	r20, 0x20	; 32
    1f56:	51 e4       	ldi	r21, 0x41	; 65
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
    1f70:	0f c0       	rjmp	.+30     	; 0x1f90 <LCD_init+0xda>
    1f72:	88 ec       	ldi	r24, 0xC8	; 200
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9c 83       	std	Y+4, r25	; 0x04
    1f78:	8b 83       	std	Y+3, r24	; 0x03
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_init+0xc8>
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	69 f7       	brne	.-38     	; 0x1f72 <LCD_init+0xbc>
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9c:	78 85       	ldd	r23, Y+8	; 0x08
    1f9e:	89 85       	ldd	r24, Y+9	; 0x09
    1fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb2:	9a 83       	std	Y+2, r25	; 0x02
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_init+0x104>
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	6f ef       	ldi	r22, 0xFF	; 255
    1fc6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1fca:	88 e3       	ldi	r24, 0x38	; 56
    1fcc:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1fd0:	8c e0       	ldi	r24, 0x0C	; 12
    1fd2:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_sendCommand>
}
    1fdc:	2e 96       	adiw	r28, 0x0e	; 14
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	e9 97       	sbiw	r28, 0x39	; 57
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	64 e0       	ldi	r22, 0x04	; 4
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <GPIO_writePin>
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	a0 e8       	ldi	r26, 0x80	; 128
    2014:	bf e3       	ldi	r27, 0x3F	; 63
    2016:	8d ab       	std	Y+53, r24	; 0x35
    2018:	9e ab       	std	Y+54, r25	; 0x36
    201a:	af ab       	std	Y+55, r26	; 0x37
    201c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201e:	6d a9       	ldd	r22, Y+53	; 0x35
    2020:	7e a9       	ldd	r23, Y+54	; 0x36
    2022:	8f a9       	ldd	r24, Y+55	; 0x37
    2024:	98 ad       	ldd	r25, Y+56	; 0x38
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4a ef       	ldi	r20, 0xFA	; 250
    202c:	54 e4       	ldi	r21, 0x44	; 68
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	89 ab       	std	Y+49, r24	; 0x31
    2038:	9a ab       	std	Y+50, r25	; 0x32
    203a:	ab ab       	std	Y+51, r26	; 0x33
    203c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    203e:	69 a9       	ldd	r22, Y+49	; 0x31
    2040:	7a a9       	ldd	r23, Y+50	; 0x32
    2042:	8b a9       	ldd	r24, Y+51	; 0x33
    2044:	9c a9       	ldd	r25, Y+52	; 0x34
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e8       	ldi	r20, 0x80	; 128
    204c:	5f e3       	ldi	r21, 0x3F	; 63
    204e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2052:	88 23       	and	r24, r24
    2054:	2c f4       	brge	.+10     	; 0x2060 <LCD_sendCommand+0x72>
		__ticks = 1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	98 ab       	std	Y+48, r25	; 0x30
    205c:	8f a7       	std	Y+47, r24	; 0x2f
    205e:	3f c0       	rjmp	.+126    	; 0x20de <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2060:	69 a9       	ldd	r22, Y+49	; 0x31
    2062:	7a a9       	ldd	r23, Y+50	; 0x32
    2064:	8b a9       	ldd	r24, Y+51	; 0x33
    2066:	9c a9       	ldd	r25, Y+52	; 0x34
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	3f ef       	ldi	r19, 0xFF	; 255
    206c:	4f e7       	ldi	r20, 0x7F	; 127
    206e:	57 e4       	ldi	r21, 0x47	; 71
    2070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2074:	18 16       	cp	r1, r24
    2076:	4c f5       	brge	.+82     	; 0x20ca <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	6d a9       	ldd	r22, Y+53	; 0x35
    207a:	7e a9       	ldd	r23, Y+54	; 0x36
    207c:	8f a9       	ldd	r24, Y+55	; 0x37
    207e:	98 ad       	ldd	r25, Y+56	; 0x38
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e2       	ldi	r20, 0x20	; 32
    2086:	51 e4       	ldi	r21, 0x41	; 65
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	bc 01       	movw	r22, r24
    2092:	cd 01       	movw	r24, r26
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	98 ab       	std	Y+48, r25	; 0x30
    209e:	8f a7       	std	Y+47, r24	; 0x2f
    20a0:	0f c0       	rjmp	.+30     	; 0x20c0 <LCD_sendCommand+0xd2>
    20a2:	88 ec       	ldi	r24, 0xC8	; 200
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	9e a7       	std	Y+46, r25	; 0x2e
    20a8:	8d a7       	std	Y+45, r24	; 0x2d
    20aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    20ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_sendCommand+0xc0>
    20b2:	9e a7       	std	Y+46, r25	; 0x2e
    20b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b8:	98 a9       	ldd	r25, Y+48	; 0x30
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	98 ab       	std	Y+48, r25	; 0x30
    20be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c2:	98 a9       	ldd	r25, Y+48	; 0x30
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	69 f7       	brne	.-38     	; 0x20a2 <LCD_sendCommand+0xb4>
    20c8:	14 c0       	rjmp	.+40     	; 0x20f2 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ca:	69 a9       	ldd	r22, Y+49	; 0x31
    20cc:	7a a9       	ldd	r23, Y+50	; 0x32
    20ce:	8b a9       	ldd	r24, Y+51	; 0x33
    20d0:	9c a9       	ldd	r25, Y+52	; 0x34
    20d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	98 ab       	std	Y+48, r25	; 0x30
    20dc:	8f a7       	std	Y+47, r24	; 0x2f
    20de:	8f a5       	ldd	r24, Y+47	; 0x2f
    20e0:	98 a9       	ldd	r25, Y+48	; 0x30
    20e2:	9c a7       	std	Y+44, r25	; 0x2c
    20e4:	8b a7       	std	Y+43, r24	; 0x2b
    20e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_sendCommand+0xfc>
    20ee:	9c a7       	std	Y+44, r25	; 0x2c
    20f0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20f2:	83 e0       	ldi	r24, 0x03	; 3
    20f4:	65 e0       	ldi	r22, 0x05	; 5
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <GPIO_writePin>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e8       	ldi	r26, 0x80	; 128
    2102:	bf e3       	ldi	r27, 0x3F	; 63
    2104:	8f a3       	std	Y+39, r24	; 0x27
    2106:	98 a7       	std	Y+40, r25	; 0x28
    2108:	a9 a7       	std	Y+41, r26	; 0x29
    210a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210c:	6f a1       	ldd	r22, Y+39	; 0x27
    210e:	78 a5       	ldd	r23, Y+40	; 0x28
    2110:	89 a5       	ldd	r24, Y+41	; 0x29
    2112:	9a a5       	ldd	r25, Y+42	; 0x2a
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4a ef       	ldi	r20, 0xFA	; 250
    211a:	54 e4       	ldi	r21, 0x44	; 68
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	8b a3       	std	Y+35, r24	; 0x23
    2126:	9c a3       	std	Y+36, r25	; 0x24
    2128:	ad a3       	std	Y+37, r26	; 0x25
    212a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    212c:	6b a1       	ldd	r22, Y+35	; 0x23
    212e:	7c a1       	ldd	r23, Y+36	; 0x24
    2130:	8d a1       	ldd	r24, Y+37	; 0x25
    2132:	9e a1       	ldd	r25, Y+38	; 0x26
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	2c f4       	brge	.+10     	; 0x214e <LCD_sendCommand+0x160>
		__ticks = 1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9a a3       	std	Y+34, r25	; 0x22
    214a:	89 a3       	std	Y+33, r24	; 0x21
    214c:	3f c0       	rjmp	.+126    	; 0x21cc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    214e:	6b a1       	ldd	r22, Y+35	; 0x23
    2150:	7c a1       	ldd	r23, Y+36	; 0x24
    2152:	8d a1       	ldd	r24, Y+37	; 0x25
    2154:	9e a1       	ldd	r25, Y+38	; 0x26
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	3f ef       	ldi	r19, 0xFF	; 255
    215a:	4f e7       	ldi	r20, 0x7F	; 127
    215c:	57 e4       	ldi	r21, 0x47	; 71
    215e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2162:	18 16       	cp	r1, r24
    2164:	4c f5       	brge	.+82     	; 0x21b8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	6f a1       	ldd	r22, Y+39	; 0x27
    2168:	78 a5       	ldd	r23, Y+40	; 0x28
    216a:	89 a5       	ldd	r24, Y+41	; 0x29
    216c:	9a a5       	ldd	r25, Y+42	; 0x2a
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e2       	ldi	r20, 0x20	; 32
    2174:	51 e4       	ldi	r21, 0x41	; 65
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9a a3       	std	Y+34, r25	; 0x22
    218c:	89 a3       	std	Y+33, r24	; 0x21
    218e:	0f c0       	rjmp	.+30     	; 0x21ae <LCD_sendCommand+0x1c0>
    2190:	88 ec       	ldi	r24, 0xC8	; 200
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	98 a3       	std	Y+32, r25	; 0x20
    2196:	8f 8f       	std	Y+31, r24	; 0x1f
    2198:	8f 8d       	ldd	r24, Y+31	; 0x1f
    219a:	98 a1       	ldd	r25, Y+32	; 0x20
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_sendCommand+0x1ae>
    21a0:	98 a3       	std	Y+32, r25	; 0x20
    21a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	89 a1       	ldd	r24, Y+33	; 0x21
    21a6:	9a a1       	ldd	r25, Y+34	; 0x22
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	9a a3       	std	Y+34, r25	; 0x22
    21ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ae:	89 a1       	ldd	r24, Y+33	; 0x21
    21b0:	9a a1       	ldd	r25, Y+34	; 0x22
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	69 f7       	brne	.-38     	; 0x2190 <LCD_sendCommand+0x1a2>
    21b6:	14 c0       	rjmp	.+40     	; 0x21e0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ba:	7c a1       	ldd	r23, Y+36	; 0x24
    21bc:	8d a1       	ldd	r24, Y+37	; 0x25
    21be:	9e a1       	ldd	r25, Y+38	; 0x26
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9a a3       	std	Y+34, r25	; 0x22
    21ca:	89 a3       	std	Y+33, r24	; 0x21
    21cc:	89 a1       	ldd	r24, Y+33	; 0x21
    21ce:	9a a1       	ldd	r25, Y+34	; 0x22
    21d0:	9e 8f       	std	Y+30, r25	; 0x1e
    21d2:	8d 8f       	std	Y+29, r24	; 0x1d
    21d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_sendCommand+0x1ea>
    21dc:	9e 8f       	std	Y+30, r25	; 0x1e
    21de:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    21e0:	82 e0       	ldi	r24, 0x02	; 2
    21e2:	69 ad       	ldd	r22, Y+57	; 0x39
    21e4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <GPIO_writePort>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 e8       	ldi	r26, 0x80	; 128
    21ee:	bf e3       	ldi	r27, 0x3F	; 63
    21f0:	89 8f       	std	Y+25, r24	; 0x19
    21f2:	9a 8f       	std	Y+26, r25	; 0x1a
    21f4:	ab 8f       	std	Y+27, r26	; 0x1b
    21f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	69 8d       	ldd	r22, Y+25	; 0x19
    21fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a ef       	ldi	r20, 0xFA	; 250
    2206:	54 e4       	ldi	r21, 0x44	; 68
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8d 8b       	std	Y+21, r24	; 0x15
    2212:	9e 8b       	std	Y+22, r25	; 0x16
    2214:	af 8b       	std	Y+23, r26	; 0x17
    2216:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2218:	6d 89       	ldd	r22, Y+21	; 0x15
    221a:	7e 89       	ldd	r23, Y+22	; 0x16
    221c:	8f 89       	ldd	r24, Y+23	; 0x17
    221e:	98 8d       	ldd	r25, Y+24	; 0x18
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
    2238:	3f c0       	rjmp	.+126    	; 0x22b8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    223a:	6d 89       	ldd	r22, Y+21	; 0x15
    223c:	7e 89       	ldd	r23, Y+22	; 0x16
    223e:	8f 89       	ldd	r24, Y+23	; 0x17
    2240:	98 8d       	ldd	r25, Y+24	; 0x18
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	4c f5       	brge	.+82     	; 0x22a4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	69 8d       	ldd	r22, Y+25	; 0x19
    2254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9c 8b       	std	Y+20, r25	; 0x14
    2278:	8b 8b       	std	Y+19, r24	; 0x13
    227a:	0f c0       	rjmp	.+30     	; 0x229a <LCD_sendCommand+0x2ac>
    227c:	88 ec       	ldi	r24, 0xC8	; 200
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9a 8b       	std	Y+18, r25	; 0x12
    2282:	89 8b       	std	Y+17, r24	; 0x11
    2284:	89 89       	ldd	r24, Y+17	; 0x11
    2286:	9a 89       	ldd	r25, Y+18	; 0x12
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_sendCommand+0x29a>
    228c:	9a 8b       	std	Y+18, r25	; 0x12
    228e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	8b 89       	ldd	r24, Y+19	; 0x13
    2292:	9c 89       	ldd	r25, Y+20	; 0x14
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9c 8b       	std	Y+20, r25	; 0x14
    2298:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	8b 89       	ldd	r24, Y+19	; 0x13
    229c:	9c 89       	ldd	r25, Y+20	; 0x14
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	69 f7       	brne	.-38     	; 0x227c <LCD_sendCommand+0x28e>
    22a2:	14 c0       	rjmp	.+40     	; 0x22cc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	6d 89       	ldd	r22, Y+21	; 0x15
    22a6:	7e 89       	ldd	r23, Y+22	; 0x16
    22a8:	8f 89       	ldd	r24, Y+23	; 0x17
    22aa:	98 8d       	ldd	r25, Y+24	; 0x18
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9c 8b       	std	Y+20, r25	; 0x14
    22b6:	8b 8b       	std	Y+19, r24	; 0x13
    22b8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ba:	9c 89       	ldd	r25, Y+20	; 0x14
    22bc:	98 8b       	std	Y+16, r25	; 0x10
    22be:	8f 87       	std	Y+15, r24	; 0x0f
    22c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c2:	98 89       	ldd	r25, Y+16	; 0x10
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <LCD_sendCommand+0x2d6>
    22c8:	98 8b       	std	Y+16, r25	; 0x10
    22ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22cc:	83 e0       	ldi	r24, 0x03	; 3
    22ce:	65 e0       	ldi	r22, 0x05	; 5
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <GPIO_writePin>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a0 e8       	ldi	r26, 0x80	; 128
    22dc:	bf e3       	ldi	r27, 0x3F	; 63
    22de:	8b 87       	std	Y+11, r24	; 0x0b
    22e0:	9c 87       	std	Y+12, r25	; 0x0c
    22e2:	ad 87       	std	Y+13, r26	; 0x0d
    22e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	4a ef       	ldi	r20, 0xFA	; 250
    22f4:	54 e4       	ldi	r21, 0x44	; 68
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8f 83       	std	Y+7, r24	; 0x07
    2300:	98 87       	std	Y+8, r25	; 0x08
    2302:	a9 87       	std	Y+9, r26	; 0x09
    2304:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e8       	ldi	r20, 0x80	; 128
    2314:	5f e3       	ldi	r21, 0x3F	; 63
    2316:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    231a:	88 23       	and	r24, r24
    231c:	2c f4       	brge	.+10     	; 0x2328 <LCD_sendCommand+0x33a>
		__ticks = 1;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	3f c0       	rjmp	.+126    	; 0x23a6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2328:	6f 81       	ldd	r22, Y+7	; 0x07
    232a:	78 85       	ldd	r23, Y+8	; 0x08
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	4f e7       	ldi	r20, 0x7F	; 127
    2336:	57 e4       	ldi	r21, 0x47	; 71
    2338:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233c:	18 16       	cp	r1, r24
    233e:	4c f5       	brge	.+82     	; 0x2392 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2340:	6b 85       	ldd	r22, Y+11	; 0x0b
    2342:	7c 85       	ldd	r23, Y+12	; 0x0c
    2344:	8d 85       	ldd	r24, Y+13	; 0x0d
    2346:	9e 85       	ldd	r25, Y+14	; 0x0e
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e2       	ldi	r20, 0x20	; 32
    234e:	51 e4       	ldi	r21, 0x41	; 65
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
    2368:	0f c0       	rjmp	.+30     	; 0x2388 <LCD_sendCommand+0x39a>
    236a:	88 ec       	ldi	r24, 0xC8	; 200
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9c 83       	std	Y+4, r25	; 0x04
    2370:	8b 83       	std	Y+3, r24	; 0x03
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_sendCommand+0x388>
    237a:	9c 83       	std	Y+4, r25	; 0x04
    237c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2388:	8d 81       	ldd	r24, Y+5	; 0x05
    238a:	9e 81       	ldd	r25, Y+6	; 0x06
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	69 f7       	brne	.-38     	; 0x236a <LCD_sendCommand+0x37c>
    2390:	14 c0       	rjmp	.+40     	; 0x23ba <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_sendCommand+0x3c4>
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23ba:	e9 96       	adiw	r28, 0x39	; 57
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	e9 97       	sbiw	r28, 0x39	; 57
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    23e2:	83 e0       	ldi	r24, 0x03	; 3
    23e4:	64 e0       	ldi	r22, 0x04	; 4
    23e6:	41 e0       	ldi	r20, 0x01	; 1
    23e8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <GPIO_writePin>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a0 e8       	ldi	r26, 0x80	; 128
    23f2:	bf e3       	ldi	r27, 0x3F	; 63
    23f4:	8d ab       	std	Y+53, r24	; 0x35
    23f6:	9e ab       	std	Y+54, r25	; 0x36
    23f8:	af ab       	std	Y+55, r26	; 0x37
    23fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fc:	6d a9       	ldd	r22, Y+53	; 0x35
    23fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2400:	8f a9       	ldd	r24, Y+55	; 0x37
    2402:	98 ad       	ldd	r25, Y+56	; 0x38
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	4a ef       	ldi	r20, 0xFA	; 250
    240a:	54 e4       	ldi	r21, 0x44	; 68
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	89 ab       	std	Y+49, r24	; 0x31
    2416:	9a ab       	std	Y+50, r25	; 0x32
    2418:	ab ab       	std	Y+51, r26	; 0x33
    241a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    241c:	69 a9       	ldd	r22, Y+49	; 0x31
    241e:	7a a9       	ldd	r23, Y+50	; 0x32
    2420:	8b a9       	ldd	r24, Y+51	; 0x33
    2422:	9c a9       	ldd	r25, Y+52	; 0x34
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e8       	ldi	r20, 0x80	; 128
    242a:	5f e3       	ldi	r21, 0x3F	; 63
    242c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2430:	88 23       	and	r24, r24
    2432:	2c f4       	brge	.+10     	; 0x243e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	98 ab       	std	Y+48, r25	; 0x30
    243a:	8f a7       	std	Y+47, r24	; 0x2f
    243c:	3f c0       	rjmp	.+126    	; 0x24bc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    243e:	69 a9       	ldd	r22, Y+49	; 0x31
    2440:	7a a9       	ldd	r23, Y+50	; 0x32
    2442:	8b a9       	ldd	r24, Y+51	; 0x33
    2444:	9c a9       	ldd	r25, Y+52	; 0x34
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	3f ef       	ldi	r19, 0xFF	; 255
    244a:	4f e7       	ldi	r20, 0x7F	; 127
    244c:	57 e4       	ldi	r21, 0x47	; 71
    244e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2452:	18 16       	cp	r1, r24
    2454:	4c f5       	brge	.+82     	; 0x24a8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2456:	6d a9       	ldd	r22, Y+53	; 0x35
    2458:	7e a9       	ldd	r23, Y+54	; 0x36
    245a:	8f a9       	ldd	r24, Y+55	; 0x37
    245c:	98 ad       	ldd	r25, Y+56	; 0x38
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e2       	ldi	r20, 0x20	; 32
    2464:	51 e4       	ldi	r21, 0x41	; 65
    2466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	98 ab       	std	Y+48, r25	; 0x30
    247c:	8f a7       	std	Y+47, r24	; 0x2f
    247e:	0f c0       	rjmp	.+30     	; 0x249e <LCD_displayCharacter+0xd2>
    2480:	88 ec       	ldi	r24, 0xC8	; 200
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9e a7       	std	Y+46, r25	; 0x2e
    2486:	8d a7       	std	Y+45, r24	; 0x2d
    2488:	8d a5       	ldd	r24, Y+45	; 0x2d
    248a:	9e a5       	ldd	r25, Y+46	; 0x2e
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LCD_displayCharacter+0xc0>
    2490:	9e a7       	std	Y+46, r25	; 0x2e
    2492:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2494:	8f a5       	ldd	r24, Y+47	; 0x2f
    2496:	98 a9       	ldd	r25, Y+48	; 0x30
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	98 ab       	std	Y+48, r25	; 0x30
    249c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249e:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a0:	98 a9       	ldd	r25, Y+48	; 0x30
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	69 f7       	brne	.-38     	; 0x2480 <LCD_displayCharacter+0xb4>
    24a6:	14 c0       	rjmp	.+40     	; 0x24d0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a8:	69 a9       	ldd	r22, Y+49	; 0x31
    24aa:	7a a9       	ldd	r23, Y+50	; 0x32
    24ac:	8b a9       	ldd	r24, Y+51	; 0x33
    24ae:	9c a9       	ldd	r25, Y+52	; 0x34
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	98 ab       	std	Y+48, r25	; 0x30
    24ba:	8f a7       	std	Y+47, r24	; 0x2f
    24bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24be:	98 a9       	ldd	r25, Y+48	; 0x30
    24c0:	9c a7       	std	Y+44, r25	; 0x2c
    24c2:	8b a7       	std	Y+43, r24	; 0x2b
    24c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    24c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <LCD_displayCharacter+0xfc>
    24cc:	9c a7       	std	Y+44, r25	; 0x2c
    24ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	65 e0       	ldi	r22, 0x05	; 5
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <GPIO_writePin>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a0 e8       	ldi	r26, 0x80	; 128
    24e0:	bf e3       	ldi	r27, 0x3F	; 63
    24e2:	8f a3       	std	Y+39, r24	; 0x27
    24e4:	98 a7       	std	Y+40, r25	; 0x28
    24e6:	a9 a7       	std	Y+41, r26	; 0x29
    24e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	6f a1       	ldd	r22, Y+39	; 0x27
    24ec:	78 a5       	ldd	r23, Y+40	; 0x28
    24ee:	89 a5       	ldd	r24, Y+41	; 0x29
    24f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8b a3       	std	Y+35, r24	; 0x23
    2504:	9c a3       	std	Y+36, r25	; 0x24
    2506:	ad a3       	std	Y+37, r26	; 0x25
    2508:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    250a:	6b a1       	ldd	r22, Y+35	; 0x23
    250c:	7c a1       	ldd	r23, Y+36	; 0x24
    250e:	8d a1       	ldd	r24, Y+37	; 0x25
    2510:	9e a1       	ldd	r25, Y+38	; 0x26
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9a a3       	std	Y+34, r25	; 0x22
    2528:	89 a3       	std	Y+33, r24	; 0x21
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    252c:	6b a1       	ldd	r22, Y+35	; 0x23
    252e:	7c a1       	ldd	r23, Y+36	; 0x24
    2530:	8d a1       	ldd	r24, Y+37	; 0x25
    2532:	9e a1       	ldd	r25, Y+38	; 0x26
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	6f a1       	ldd	r22, Y+39	; 0x27
    2546:	78 a5       	ldd	r23, Y+40	; 0x28
    2548:	89 a5       	ldd	r24, Y+41	; 0x29
    254a:	9a a5       	ldd	r25, Y+42	; 0x2a
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9a a3       	std	Y+34, r25	; 0x22
    256a:	89 a3       	std	Y+33, r24	; 0x21
    256c:	0f c0       	rjmp	.+30     	; 0x258c <LCD_displayCharacter+0x1c0>
    256e:	88 ec       	ldi	r24, 0xC8	; 200
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	98 a3       	std	Y+32, r25	; 0x20
    2574:	8f 8f       	std	Y+31, r24	; 0x1f
    2576:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2578:	98 a1       	ldd	r25, Y+32	; 0x20
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_displayCharacter+0x1ae>
    257e:	98 a3       	std	Y+32, r25	; 0x20
    2580:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	89 a1       	ldd	r24, Y+33	; 0x21
    2584:	9a a1       	ldd	r25, Y+34	; 0x22
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9a a3       	std	Y+34, r25	; 0x22
    258a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	89 a1       	ldd	r24, Y+33	; 0x21
    258e:	9a a1       	ldd	r25, Y+34	; 0x22
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <LCD_displayCharacter+0x1a2>
    2594:	14 c0       	rjmp	.+40     	; 0x25be <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	6b a1       	ldd	r22, Y+35	; 0x23
    2598:	7c a1       	ldd	r23, Y+36	; 0x24
    259a:	8d a1       	ldd	r24, Y+37	; 0x25
    259c:	9e a1       	ldd	r25, Y+38	; 0x26
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9a a3       	std	Y+34, r25	; 0x22
    25a8:	89 a3       	std	Y+33, r24	; 0x21
    25aa:	89 a1       	ldd	r24, Y+33	; 0x21
    25ac:	9a a1       	ldd	r25, Y+34	; 0x22
    25ae:	9e 8f       	std	Y+30, r25	; 0x1e
    25b0:	8d 8f       	std	Y+29, r24	; 0x1d
    25b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_displayCharacter+0x1ea>
    25ba:	9e 8f       	std	Y+30, r25	; 0x1e
    25bc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	69 ad       	ldd	r22, Y+57	; 0x39
    25c2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <GPIO_writePort>
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	a0 e8       	ldi	r26, 0x80	; 128
    25cc:	bf e3       	ldi	r27, 0x3F	; 63
    25ce:	89 8f       	std	Y+25, r24	; 0x19
    25d0:	9a 8f       	std	Y+26, r25	; 0x1a
    25d2:	ab 8f       	std	Y+27, r26	; 0x1b
    25d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d6:	69 8d       	ldd	r22, Y+25	; 0x19
    25d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	4a ef       	ldi	r20, 0xFA	; 250
    25e4:	54 e4       	ldi	r21, 0x44	; 68
    25e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	8d 8b       	std	Y+21, r24	; 0x15
    25f0:	9e 8b       	std	Y+22, r25	; 0x16
    25f2:	af 8b       	std	Y+23, r26	; 0x17
    25f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25f6:	6d 89       	ldd	r22, Y+21	; 0x15
    25f8:	7e 89       	ldd	r23, Y+22	; 0x16
    25fa:	8f 89       	ldd	r24, Y+23	; 0x17
    25fc:	98 8d       	ldd	r25, Y+24	; 0x18
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e8       	ldi	r20, 0x80	; 128
    2604:	5f e3       	ldi	r21, 0x3F	; 63
    2606:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    260a:	88 23       	and	r24, r24
    260c:	2c f4       	brge	.+10     	; 0x2618 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	9c 8b       	std	Y+20, r25	; 0x14
    2614:	8b 8b       	std	Y+19, r24	; 0x13
    2616:	3f c0       	rjmp	.+126    	; 0x2696 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2618:	6d 89       	ldd	r22, Y+21	; 0x15
    261a:	7e 89       	ldd	r23, Y+22	; 0x16
    261c:	8f 89       	ldd	r24, Y+23	; 0x17
    261e:	98 8d       	ldd	r25, Y+24	; 0x18
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	3f ef       	ldi	r19, 0xFF	; 255
    2624:	4f e7       	ldi	r20, 0x7F	; 127
    2626:	57 e4       	ldi	r21, 0x47	; 71
    2628:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    262c:	18 16       	cp	r1, r24
    262e:	4c f5       	brge	.+82     	; 0x2682 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2630:	69 8d       	ldd	r22, Y+25	; 0x19
    2632:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2636:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e2       	ldi	r20, 0x20	; 32
    263e:	51 e4       	ldi	r21, 0x41	; 65
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	bc 01       	movw	r22, r24
    264a:	cd 01       	movw	r24, r26
    264c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9c 8b       	std	Y+20, r25	; 0x14
    2656:	8b 8b       	std	Y+19, r24	; 0x13
    2658:	0f c0       	rjmp	.+30     	; 0x2678 <LCD_displayCharacter+0x2ac>
    265a:	88 ec       	ldi	r24, 0xC8	; 200
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9a 8b       	std	Y+18, r25	; 0x12
    2660:	89 8b       	std	Y+17, r24	; 0x11
    2662:	89 89       	ldd	r24, Y+17	; 0x11
    2664:	9a 89       	ldd	r25, Y+18	; 0x12
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <LCD_displayCharacter+0x29a>
    266a:	9a 8b       	std	Y+18, r25	; 0x12
    266c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266e:	8b 89       	ldd	r24, Y+19	; 0x13
    2670:	9c 89       	ldd	r25, Y+20	; 0x14
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	9c 8b       	std	Y+20, r25	; 0x14
    2676:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2678:	8b 89       	ldd	r24, Y+19	; 0x13
    267a:	9c 89       	ldd	r25, Y+20	; 0x14
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	69 f7       	brne	.-38     	; 0x265a <LCD_displayCharacter+0x28e>
    2680:	14 c0       	rjmp	.+40     	; 0x26aa <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2682:	6d 89       	ldd	r22, Y+21	; 0x15
    2684:	7e 89       	ldd	r23, Y+22	; 0x16
    2686:	8f 89       	ldd	r24, Y+23	; 0x17
    2688:	98 8d       	ldd	r25, Y+24	; 0x18
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9c 8b       	std	Y+20, r25	; 0x14
    2694:	8b 8b       	std	Y+19, r24	; 0x13
    2696:	8b 89       	ldd	r24, Y+19	; 0x13
    2698:	9c 89       	ldd	r25, Y+20	; 0x14
    269a:	98 8b       	std	Y+16, r25	; 0x10
    269c:	8f 87       	std	Y+15, r24	; 0x0f
    269e:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a0:	98 89       	ldd	r25, Y+16	; 0x10
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <LCD_displayCharacter+0x2d6>
    26a6:	98 8b       	std	Y+16, r25	; 0x10
    26a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26aa:	83 e0       	ldi	r24, 0x03	; 3
    26ac:	65 e0       	ldi	r22, 0x05	; 5
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <GPIO_writePin>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	a0 e8       	ldi	r26, 0x80	; 128
    26ba:	bf e3       	ldi	r27, 0x3F	; 63
    26bc:	8b 87       	std	Y+11, r24	; 0x0b
    26be:	9c 87       	std	Y+12, r25	; 0x0c
    26c0:	ad 87       	std	Y+13, r26	; 0x0d
    26c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	4a ef       	ldi	r20, 0xFA	; 250
    26d2:	54 e4       	ldi	r21, 0x44	; 68
    26d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	8f 83       	std	Y+7, r24	; 0x07
    26de:	98 87       	std	Y+8, r25	; 0x08
    26e0:	a9 87       	std	Y+9, r26	; 0x09
    26e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e4:	6f 81       	ldd	r22, Y+7	; 0x07
    26e6:	78 85       	ldd	r23, Y+8	; 0x08
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e8       	ldi	r20, 0x80	; 128
    26f2:	5f e3       	ldi	r21, 0x3F	; 63
    26f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f8:	88 23       	and	r24, r24
    26fa:	2c f4       	brge	.+10     	; 0x2706 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
    2704:	3f c0       	rjmp	.+126    	; 0x2784 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2706:	6f 81       	ldd	r22, Y+7	; 0x07
    2708:	78 85       	ldd	r23, Y+8	; 0x08
    270a:	89 85       	ldd	r24, Y+9	; 0x09
    270c:	9a 85       	ldd	r25, Y+10	; 0x0a
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	3f ef       	ldi	r19, 0xFF	; 255
    2712:	4f e7       	ldi	r20, 0x7F	; 127
    2714:	57 e4       	ldi	r21, 0x47	; 71
    2716:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271a:	18 16       	cp	r1, r24
    271c:	4c f5       	brge	.+82     	; 0x2770 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2720:	7c 85       	ldd	r23, Y+12	; 0x0c
    2722:	8d 85       	ldd	r24, Y+13	; 0x0d
    2724:	9e 85       	ldd	r25, Y+14	; 0x0e
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e2       	ldi	r20, 0x20	; 32
    272c:	51 e4       	ldi	r21, 0x41	; 65
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	9e 83       	std	Y+6, r25	; 0x06
    2744:	8d 83       	std	Y+5, r24	; 0x05
    2746:	0f c0       	rjmp	.+30     	; 0x2766 <LCD_displayCharacter+0x39a>
    2748:	88 ec       	ldi	r24, 0xC8	; 200
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9c 83       	std	Y+4, r25	; 0x04
    274e:	8b 83       	std	Y+3, r24	; 0x03
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	9c 81       	ldd	r25, Y+4	; 0x04
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <LCD_displayCharacter+0x388>
    2758:	9c 83       	std	Y+4, r25	; 0x04
    275a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	9e 81       	ldd	r25, Y+6	; 0x06
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2766:	8d 81       	ldd	r24, Y+5	; 0x05
    2768:	9e 81       	ldd	r25, Y+6	; 0x06
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	69 f7       	brne	.-38     	; 0x2748 <LCD_displayCharacter+0x37c>
    276e:	14 c0       	rjmp	.+40     	; 0x2798 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2770:	6f 81       	ldd	r22, Y+7	; 0x07
    2772:	78 85       	ldd	r23, Y+8	; 0x08
    2774:	89 85       	ldd	r24, Y+9	; 0x09
    2776:	9a 85       	ldd	r25, Y+10	; 0x0a
    2778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	9e 83       	std	Y+6, r25	; 0x06
    2782:	8d 83       	std	Y+5, r24	; 0x05
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	9a 83       	std	Y+2, r25	; 0x02
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_displayCharacter+0x3c4>
    2794:	9a 83       	std	Y+2, r25	; 0x02
    2796:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2798:	e9 96       	adiw	r28, 0x39	; 57
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <LCD_displayString+0x6>
    27b0:	0f 92       	push	r0
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	9b 83       	std	Y+3, r25	; 0x03
    27b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27ba:	19 82       	std	Y+1, r1	; 0x01
    27bc:	0e c0       	rjmp	.+28     	; 0x27da <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	9b 81       	ldd	r25, Y+3	; 0x03
    27c8:	fc 01       	movw	r30, r24
    27ca:	e2 0f       	add	r30, r18
    27cc:	f3 1f       	adc	r31, r19
    27ce:	80 81       	ld	r24, Z
    27d0:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
		i++;
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	8f 5f       	subi	r24, 0xFF	; 255
    27d8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	9b 81       	ldd	r25, Y+3	; 0x03
    27e4:	fc 01       	movw	r30, r24
    27e6:	e2 0f       	add	r30, r18
    27e8:	f3 1f       	adc	r31, r19
    27ea:	80 81       	ld	r24, Z
    27ec:	88 23       	and	r24, r24
    27ee:	39 f7       	brne	.-50     	; 0x27be <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	00 d0       	rcall	.+0      	; 0x2802 <LCD_moveCursor+0x6>
    2802:	00 d0       	rcall	.+0      	; 0x2804 <LCD_moveCursor+0x8>
    2804:	0f 92       	push	r0
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	8a 83       	std	Y+2, r24	; 0x02
    280c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	28 2f       	mov	r18, r24
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	3d 83       	std	Y+5, r19	; 0x05
    2816:	2c 83       	std	Y+4, r18	; 0x04
    2818:	8c 81       	ldd	r24, Y+4	; 0x04
    281a:	9d 81       	ldd	r25, Y+5	; 0x05
    281c:	81 30       	cpi	r24, 0x01	; 1
    281e:	91 05       	cpc	r25, r1
    2820:	c1 f0       	breq	.+48     	; 0x2852 <LCD_moveCursor+0x56>
    2822:	2c 81       	ldd	r18, Y+4	; 0x04
    2824:	3d 81       	ldd	r19, Y+5	; 0x05
    2826:	22 30       	cpi	r18, 0x02	; 2
    2828:	31 05       	cpc	r19, r1
    282a:	2c f4       	brge	.+10     	; 0x2836 <LCD_moveCursor+0x3a>
    282c:	8c 81       	ldd	r24, Y+4	; 0x04
    282e:	9d 81       	ldd	r25, Y+5	; 0x05
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	61 f0       	breq	.+24     	; 0x284c <LCD_moveCursor+0x50>
    2834:	19 c0       	rjmp	.+50     	; 0x2868 <LCD_moveCursor+0x6c>
    2836:	2c 81       	ldd	r18, Y+4	; 0x04
    2838:	3d 81       	ldd	r19, Y+5	; 0x05
    283a:	22 30       	cpi	r18, 0x02	; 2
    283c:	31 05       	cpc	r19, r1
    283e:	69 f0       	breq	.+26     	; 0x285a <LCD_moveCursor+0x5e>
    2840:	8c 81       	ldd	r24, Y+4	; 0x04
    2842:	9d 81       	ldd	r25, Y+5	; 0x05
    2844:	83 30       	cpi	r24, 0x03	; 3
    2846:	91 05       	cpc	r25, r1
    2848:	61 f0       	breq	.+24     	; 0x2862 <LCD_moveCursor+0x66>
    284a:	0e c0       	rjmp	.+28     	; 0x2868 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	0b c0       	rjmp	.+22     	; 0x2868 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	80 5c       	subi	r24, 0xC0	; 192
    2856:	89 83       	std	Y+1, r24	; 0x01
    2858:	07 c0       	rjmp	.+14     	; 0x2868 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	80 5f       	subi	r24, 0xF0	; 240
    285e:	89 83       	std	Y+1, r24	; 0x01
    2860:	03 c0       	rjmp	.+6      	; 0x2868 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	80 5b       	subi	r24, 0xB0	; 176
    2866:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	80 68       	ori	r24, 0x80	; 128
    286c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_sendCommand>
}
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	00 d0       	rcall	.+0      	; 0x2886 <LCD_displayStringRowColumn+0x6>
    2886:	00 d0       	rcall	.+0      	; 0x2888 <LCD_displayStringRowColumn+0x8>
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	6a 83       	std	Y+2, r22	; 0x02
    2890:	5c 83       	std	Y+4, r21	; 0x04
    2892:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	6a 81       	ldd	r22, Y+2	; 0x02
    2898:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	9c 81       	ldd	r25, Y+4	; 0x04
    28a0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>
}
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	62 97       	sbiw	r28, 0x12	; 18
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	f8 94       	cli
    28c0:	de bf       	out	0x3e, r29	; 62
    28c2:	0f be       	out	0x3f, r0	; 63
    28c4:	cd bf       	out	0x3d, r28	; 61
    28c6:	9a 8b       	std	Y+18, r25	; 0x12
    28c8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    28ca:	89 89       	ldd	r24, Y+17	; 0x11
    28cc:	9a 89       	ldd	r25, Y+18	; 0x12
    28ce:	9e 01       	movw	r18, r28
    28d0:	2f 5f       	subi	r18, 0xFF	; 255
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	b9 01       	movw	r22, r18
    28d6:	4a e0       	ldi	r20, 0x0A	; 10
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <itoa>
   LCD_displayString(buff); /* Display the string */
    28de:	ce 01       	movw	r24, r28
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_displayString>
}
    28e6:	62 96       	adiw	r28, 0x12	; 18
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_sendCommand>
}
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <UART_init>:
 *******************************************************************************/
#include "myuart.h"
#include <avr/io.h>
#include "common_macros.h"
void UART_init(UART_config *ptr)
{
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <UART_init+0x6>
    2912:	00 d0       	rcall	.+0      	; 0x2914 <UART_init+0x8>
    2914:	00 d0       	rcall	.+0      	; 0x2916 <UART_init+0xa>
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    291e:	1a 82       	std	Y+2, r1	; 0x02
    2920:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2922:	eb e2       	ldi	r30, 0x2B	; 43
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    292a:	ea e2       	ldi	r30, 0x2A	; 42
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	88 e1       	ldi	r24, 0x18	; 24
    2930:	80 83       	st	Z, r24

	UCSRC = (1<<URSEL);
    2932:	e0 e4       	ldi	r30, 0x40	; 64
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 e8       	ldi	r24, 0x80	; 128
    2938:	80 83       	st	Z, r24
	switch (ptr->num_of_data_bits){
    293a:	eb 81       	ldd	r30, Y+3	; 0x03
    293c:	fc 81       	ldd	r31, Y+4	; 0x04
    293e:	84 81       	ldd	r24, Z+4	; 0x04
    2940:	28 2f       	mov	r18, r24
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	3e 83       	std	Y+6, r19	; 0x06
    2946:	2d 83       	std	Y+5, r18	; 0x05
    2948:	8d 81       	ldd	r24, Y+5	; 0x05
    294a:	9e 81       	ldd	r25, Y+6	; 0x06
    294c:	82 30       	cpi	r24, 0x02	; 2
    294e:	91 05       	cpc	r25, r1
    2950:	09 f4       	brne	.+2      	; 0x2954 <UART_init+0x48>
    2952:	48 c0       	rjmp	.+144    	; 0x29e4 <UART_init+0xd8>
    2954:	2d 81       	ldd	r18, Y+5	; 0x05
    2956:	3e 81       	ldd	r19, Y+6	; 0x06
    2958:	23 30       	cpi	r18, 0x03	; 3
    295a:	31 05       	cpc	r19, r1
    295c:	54 f4       	brge	.+20     	; 0x2972 <UART_init+0x66>
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	99 f0       	breq	.+38     	; 0x298c <UART_init+0x80>
    2966:	2d 81       	ldd	r18, Y+5	; 0x05
    2968:	3e 81       	ldd	r19, Y+6	; 0x06
    296a:	21 30       	cpi	r18, 0x01	; 1
    296c:	31 05       	cpc	r19, r1
    296e:	21 f1       	breq	.+72     	; 0x29b8 <UART_init+0xac>
    2970:	7a c0       	rjmp	.+244    	; 0x2a66 <UART_init+0x15a>
    2972:	8d 81       	ldd	r24, Y+5	; 0x05
    2974:	9e 81       	ldd	r25, Y+6	; 0x06
    2976:	83 30       	cpi	r24, 0x03	; 3
    2978:	91 05       	cpc	r25, r1
    297a:	09 f4       	brne	.+2      	; 0x297e <UART_init+0x72>
    297c:	49 c0       	rjmp	.+146    	; 0x2a10 <UART_init+0x104>
    297e:	2d 81       	ldd	r18, Y+5	; 0x05
    2980:	3e 81       	ldd	r19, Y+6	; 0x06
    2982:	27 30       	cpi	r18, 0x07	; 7
    2984:	31 05       	cpc	r19, r1
    2986:	09 f4       	brne	.+2      	; 0x298a <UART_init+0x7e>
    2988:	59 c0       	rjmp	.+178    	; 0x2a3c <UART_init+0x130>
    298a:	6d c0       	rjmp	.+218    	; 0x2a66 <UART_init+0x15a>

	case five_bits:
		CLEAR_BIT(UCSRB,UCSZ2);
    298c:	aa e2       	ldi	r26, 0x2A	; 42
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	ea e2       	ldi	r30, 0x2A	; 42
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	8b 7f       	andi	r24, 0xFB	; 251
    2998:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ0);
    299a:	a0 e4       	ldi	r26, 0x40	; 64
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	e0 e4       	ldi	r30, 0x40	; 64
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	8d 7f       	andi	r24, 0xFD	; 253
    29a6:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    29a8:	a0 e4       	ldi	r26, 0x40	; 64
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e0 e4       	ldi	r30, 0x40	; 64
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	8b 7f       	andi	r24, 0xFB	; 251
    29b4:	8c 93       	st	X, r24
    29b6:	57 c0       	rjmp	.+174    	; 0x2a66 <UART_init+0x15a>
		break;
	case six_bits:
		SET_BIT(UCSRB,UCSZ2);
    29b8:	aa e2       	ldi	r26, 0x2A	; 42
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	ea e2       	ldi	r30, 0x2A	; 42
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	84 60       	ori	r24, 0x04	; 4
    29c4:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ0);
    29c6:	a0 e4       	ldi	r26, 0x40	; 64
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	e0 e4       	ldi	r30, 0x40	; 64
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	8d 7f       	andi	r24, 0xFD	; 253
    29d2:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    29d4:	a0 e4       	ldi	r26, 0x40	; 64
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e0 e4       	ldi	r30, 0x40	; 64
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	8b 7f       	andi	r24, 0xFB	; 251
    29e0:	8c 93       	st	X, r24
    29e2:	41 c0       	rjmp	.+130    	; 0x2a66 <UART_init+0x15a>
		break;
	case seven_bits:
		CLEAR_BIT(UCSRB,UCSZ2);
    29e4:	aa e2       	ldi	r26, 0x2A	; 42
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	ea e2       	ldi	r30, 0x2A	; 42
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	8b 7f       	andi	r24, 0xFB	; 251
    29f0:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ0);
    29f2:	a0 e4       	ldi	r26, 0x40	; 64
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	e0 e4       	ldi	r30, 0x40	; 64
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	8d 7f       	andi	r24, 0xFD	; 253
    29fe:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2a00:	a0 e4       	ldi	r26, 0x40	; 64
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	e0 e4       	ldi	r30, 0x40	; 64
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	84 60       	ori	r24, 0x04	; 4
    2a0c:	8c 93       	st	X, r24
    2a0e:	2b c0       	rjmp	.+86     	; 0x2a66 <UART_init+0x15a>
		break;
	case eight_bits:
		CLEAR_BIT(UCSRB,UCSZ2);
    2a10:	aa e2       	ldi	r26, 0x2A	; 42
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	ea e2       	ldi	r30, 0x2A	; 42
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	8b 7f       	andi	r24, 0xFB	; 251
    2a1c:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    2a1e:	a0 e4       	ldi	r26, 0x40	; 64
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	e0 e4       	ldi	r30, 0x40	; 64
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	82 60       	ori	r24, 0x02	; 2
    2a2a:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2a2c:	a0 e4       	ldi	r26, 0x40	; 64
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	e0 e4       	ldi	r30, 0x40	; 64
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	84 60       	ori	r24, 0x04	; 4
    2a38:	8c 93       	st	X, r24
    2a3a:	15 c0       	rjmp	.+42     	; 0x2a66 <UART_init+0x15a>
		break;
	case nine_bits:
		SET_BIT(UCSRB,UCSZ2);
    2a3c:	aa e2       	ldi	r26, 0x2A	; 42
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	ea e2       	ldi	r30, 0x2A	; 42
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	84 60       	ori	r24, 0x04	; 4
    2a48:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    2a4a:	a0 e4       	ldi	r26, 0x40	; 64
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e0 e4       	ldi	r30, 0x40	; 64
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	82 60       	ori	r24, 0x02	; 2
    2a56:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2a58:	a0 e4       	ldi	r26, 0x40	; 64
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	e0 e4       	ldi	r30, 0x40	; 64
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	84 60       	ori	r24, 0x04	; 4
    2a64:	8c 93       	st	X, r24
		break;
	}

	UCSRC = (UCSRC & 0xcf) | (((ptr->parity) & (0x00000003))<<4);
    2a66:	a0 e4       	ldi	r26, 0x40	; 64
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	e0 e4       	ldi	r30, 0x40	; 64
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	28 2f       	mov	r18, r24
    2a72:	2f 7c       	andi	r18, 0xCF	; 207
    2a74:	eb 81       	ldd	r30, Y+3	; 0x03
    2a76:	fc 81       	ldd	r31, Y+4	; 0x04
    2a78:	85 81       	ldd	r24, Z+5	; 0x05
    2a7a:	88 2f       	mov	r24, r24
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	83 70       	andi	r24, 0x03	; 3
    2a80:	90 70       	andi	r25, 0x00	; 0
    2a82:	82 95       	swap	r24
    2a84:	92 95       	swap	r25
    2a86:	90 7f       	andi	r25, 0xF0	; 240
    2a88:	98 27       	eor	r25, r24
    2a8a:	80 7f       	andi	r24, 0xF0	; 240
    2a8c:	98 27       	eor	r25, r24
    2a8e:	82 2b       	or	r24, r18
    2a90:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xf7) | (((ptr->stopBits) & (0x00000001))<<3);
    2a92:	a0 e4       	ldi	r26, 0x40	; 64
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e0 e4       	ldi	r30, 0x40	; 64
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	27 7f       	andi	r18, 0xF7	; 247
    2aa0:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa2:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa4:	86 81       	ldd	r24, Z+6	; 0x06
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	81 70       	andi	r24, 0x01	; 1
    2aac:	90 70       	andi	r25, 0x00	; 0
    2aae:	88 0f       	add	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	88 0f       	add	r24, r24
    2ab4:	99 1f       	adc	r25, r25
    2ab6:	88 0f       	add	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	82 2b       	or	r24, r18
    2abc:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (ptr->baud_rate * 8UL))) - 1);
    2abe:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	a2 81       	ldd	r26, Z+2	; 0x02
    2ac8:	b3 81       	ldd	r27, Z+3	; 0x03
    2aca:	88 0f       	add	r24, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	aa 1f       	adc	r26, r26
    2ad0:	bb 1f       	adc	r27, r27
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	aa 1f       	adc	r26, r26
    2ad8:	bb 1f       	adc	r27, r27
    2ada:	88 0f       	add	r24, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	aa 1f       	adc	r26, r26
    2ae0:	bb 1f       	adc	r27, r27
    2ae2:	9c 01       	movw	r18, r24
    2ae4:	ad 01       	movw	r20, r26
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	92 e1       	ldi	r25, 0x12	; 18
    2aea:	aa e7       	ldi	r26, 0x7A	; 122
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__udivmodsi4>
    2af6:	da 01       	movw	r26, r20
    2af8:	c9 01       	movw	r24, r18
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	9a 83       	std	Y+2, r25	; 0x02
    2afe:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b00:	e0 e4       	ldi	r30, 0x40	; 64
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	9a 81       	ldd	r25, Y+2	; 0x02
    2b08:	89 2f       	mov	r24, r25
    2b0a:	99 27       	eor	r25, r25
    2b0c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b0e:	e9 e2       	ldi	r30, 0x29	; 41
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	80 83       	st	Z, r24
}
    2b16:	26 96       	adiw	r28, 0x06	; 6
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	0f 92       	push	r0
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b34:	eb e2       	ldi	r30, 0x2B	; 43
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	88 2f       	mov	r24, r24
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	80 72       	andi	r24, 0x20	; 32
    2b40:	90 70       	andi	r25, 0x00	; 0
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	b9 f3       	breq	.-18     	; 0x2b34 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b46:	ec e2       	ldi	r30, 0x2C	; 44
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2b4e:	0f 90       	pop	r0
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b5e:	eb e2       	ldi	r30, 0x2B	; 43
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	88 23       	and	r24, r24
    2b66:	dc f7       	brge	.-10     	; 0x2b5e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2b68:	ec e2       	ldi	r30, 0x2C	; 44
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
}
    2b6e:	cf 91       	pop	r28
    2b70:	df 91       	pop	r29
    2b72:	08 95       	ret

00002b74 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <UART_sendString+0x6>
    2b7a:	0f 92       	push	r0
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	9b 83       	std	Y+3, r25	; 0x03
    2b82:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b84:	19 82       	std	Y+1, r1	; 0x01
    2b86:	0e c0       	rjmp	.+28     	; 0x2ba4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	9b 81       	ldd	r25, Y+3	; 0x03
    2b92:	fc 01       	movw	r30, r24
    2b94:	e2 0f       	add	r30, r18
    2b96:	f3 1f       	adc	r31, r19
    2b98:	80 81       	ld	r24, Z
    2b9a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <UART_sendByte>
		i++;
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	8f 5f       	subi	r24, 0xFF	; 255
    2ba2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	9b 81       	ldd	r25, Y+3	; 0x03
    2bae:	fc 01       	movw	r30, r24
    2bb0:	e2 0f       	add	r30, r18
    2bb2:	f3 1f       	adc	r31, r19
    2bb4:	80 81       	ld	r24, Z
    2bb6:	88 23       	and	r24, r24
    2bb8:	39 f7       	brne	.-50     	; 0x2b88 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <UART_receiveString+0xa>
    2bd0:	0f 92       	push	r0
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	9b 83       	std	Y+3, r25	; 0x03
    2bd8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bda:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	9b 81       	ldd	r25, Y+3	; 0x03
    2be6:	8c 01       	movw	r16, r24
    2be8:	02 0f       	add	r16, r18
    2bea:	13 1f       	adc	r17, r19
    2bec:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <UART_recieveByte>
    2bf0:	f8 01       	movw	r30, r16
    2bf2:	80 83       	st	Z, r24
    2bf4:	0f c0       	rjmp	.+30     	; 0x2c14 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	8f 5f       	subi	r24, 0xFF	; 255
    2bfa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	9b 81       	ldd	r25, Y+3	; 0x03
    2c06:	8c 01       	movw	r16, r24
    2c08:	02 0f       	add	r16, r18
    2c0a:	13 1f       	adc	r17, r19
    2c0c:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <UART_recieveByte>
    2c10:	f8 01       	movw	r30, r16
    2c12:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	fc 01       	movw	r30, r24
    2c20:	e2 0f       	add	r30, r18
    2c22:	f3 1f       	adc	r31, r19
    2c24:	80 81       	ld	r24, Z
    2c26:	83 32       	cpi	r24, 0x23	; 35
    2c28:	31 f7       	brne	.-52     	; 0x2bf6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	9b 81       	ldd	r25, Y+3	; 0x03
    2c34:	fc 01       	movw	r30, r24
    2c36:	e2 0f       	add	r30, r18
    2c38:	f3 1f       	adc	r31, r19
    2c3a:	10 82       	st	Z, r1
}
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	08 95       	ret

00002c4c <Timer1_init>:

/*************************************************************
* 				Function Definitions 						 *
**************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <Timer1_init+0x6>
    2c52:	0f 92       	push	r0
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	9a 83       	std	Y+2, r25	; 0x02
    2c5a:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2c5c:	ef e4       	ldi	r30, 0x4F	; 79
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	8c e0       	ldi	r24, 0x0C	; 12
    2c62:	80 83       	st	Z, r24

	TCNT1= Config_Ptr->initial_value;
    2c64:	ac e4       	ldi	r26, 0x4C	; 76
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e9 81       	ldd	r30, Y+1	; 0x01
    2c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c6c:	80 81       	ld	r24, Z
    2c6e:	91 81       	ldd	r25, Z+1	; 0x01
    2c70:	11 96       	adiw	r26, 0x01	; 1
    2c72:	9c 93       	st	X, r25
    2c74:	8e 93       	st	-X, r24
	OCR1A= Config_Ptr->compare_value;
    2c76:	aa e4       	ldi	r26, 0x4A	; 74
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c7e:	82 81       	ldd	r24, Z+2	; 0x02
    2c80:	93 81       	ldd	r25, Z+3	; 0x03
    2c82:	11 96       	adiw	r26, 0x01	; 1
    2c84:	9c 93       	st	X, r25
    2c86:	8e 93       	st	-X, r24

	TCCR1A= (TCCR1A & 0xFC) | ((Config_Ptr->mode) & 0x03);
    2c88:	af e4       	ldi	r26, 0x4F	; 79
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	ef e4       	ldi	r30, 0x4F	; 79
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	98 2f       	mov	r25, r24
    2c94:	9c 7f       	andi	r25, 0xFC	; 252
    2c96:	e9 81       	ldd	r30, Y+1	; 0x01
    2c98:	fa 81       	ldd	r31, Y+2	; 0x02
    2c9a:	85 81       	ldd	r24, Z+5	; 0x05
    2c9c:	83 70       	andi	r24, 0x03	; 3
    2c9e:	89 2b       	or	r24, r25
    2ca0:	8c 93       	st	X, r24
	TCCR1B= (TCCR1B & 0x00) | ( ( (Config_Ptr->mode) & 0xFC) << 3);
    2ca2:	ee e4       	ldi	r30, 0x4E	; 78
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	ae e4       	ldi	r26, 0x4E	; 78
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	e9 81       	ldd	r30, Y+1	; 0x01
    2cae:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb0:	85 81       	ldd	r24, Z+5	; 0x05
    2cb2:	88 2f       	mov	r24, r24
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	8c 7f       	andi	r24, 0xFC	; 252
    2cb8:	90 70       	andi	r25, 0x00	; 0
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	88 0f       	add	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	8c 93       	st	X, r24

	TIMSK = (1<< OCIE1A) | (1<< TOIE1);
    2cc8:	e9 e5       	ldi	r30, 0x59	; 89
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	84 e1       	ldi	r24, 0x14	; 20
    2cce:	80 83       	st	Z, r24
	SREG|= (1<<7);
    2cd0:	af e5       	ldi	r26, 0x5F	; 95
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	ef e5       	ldi	r30, 0x5F	; 95
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	80 68       	ori	r24, 0x80	; 128
    2cdc:	8c 93       	st	X, r24

	TCCR1B= (TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07);
    2cde:	ae e4       	ldi	r26, 0x4E	; 78
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	ee e4       	ldi	r30, 0x4E	; 78
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	98 2f       	mov	r25, r24
    2cea:	98 7f       	andi	r25, 0xF8	; 248
    2cec:	e9 81       	ldd	r30, Y+1	; 0x01
    2cee:	fa 81       	ldd	r31, Y+2	; 0x02
    2cf0:	84 81       	ldd	r24, Z+4	; 0x04
    2cf2:	87 70       	andi	r24, 0x07	; 7
    2cf4:	89 2b       	or	r24, r25
    2cf6:	8c 93       	st	X, r24
}
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <Timer1_deInit>:

void Timer1_deInit(void){
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2d0c:	ef e4       	ldi	r30, 0x4F	; 79
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	10 82       	st	Z, r1
	TCCR1B=0;
    2d12:	ee e4       	ldi	r30, 0x4E	; 78
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	10 82       	st	Z, r1
	TCNT1=0;
    2d18:	ec e4       	ldi	r30, 0x4C	; 76
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	11 82       	std	Z+1, r1	; 0x01
    2d1e:	10 82       	st	Z, r1
	OCR1A=0;
    2d20:	ea e4       	ldi	r30, 0x4A	; 74
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	11 82       	std	Z+1, r1	; 0x01
    2d26:	10 82       	st	Z, r1
	TIMSK= (TIMSK & 0x3C);
    2d28:	a9 e5       	ldi	r26, 0x59	; 89
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	e9 e5       	ldi	r30, 0x59	; 89
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	8c 73       	andi	r24, 0x3C	; 60
    2d34:	8c 93       	st	X, r24
}
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	08 95       	ret

00002d3c <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <Timer1_setCallBack+0x6>
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	9a 83       	std	Y+2, r25	; 0x02
    2d48:	89 83       	std	Y+1, r24	; 0x01
	g_function_ptr= a_ptr;
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4e:	90 93 20 01 	sts	0x0120, r25
    2d52:	80 93 1f 01 	sts	0x011F, r24
}
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <__vector_7>:

/*************************************************************
* 			    	ISRs Definitions   						 *
**************************************************************/
ISR(TIMER1_COMPA_vect){
    2d60:	1f 92       	push	r1
    2d62:	0f 92       	push	r0
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	0f 92       	push	r0
    2d68:	11 24       	eor	r1, r1
    2d6a:	2f 93       	push	r18
    2d6c:	3f 93       	push	r19
    2d6e:	4f 93       	push	r20
    2d70:	5f 93       	push	r21
    2d72:	6f 93       	push	r22
    2d74:	7f 93       	push	r23
    2d76:	8f 93       	push	r24
    2d78:	9f 93       	push	r25
    2d7a:	af 93       	push	r26
    2d7c:	bf 93       	push	r27
    2d7e:	ef 93       	push	r30
    2d80:	ff 93       	push	r31
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
	if(g_function_ptr != NULL_PTR){
    2d8a:	80 91 1f 01 	lds	r24, 0x011F
    2d8e:	90 91 20 01 	lds	r25, 0x0120
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	29 f0       	breq	.+10     	; 0x2da0 <__vector_7+0x40>
		(*g_function_ptr)();
    2d96:	e0 91 1f 01 	lds	r30, 0x011F
    2d9a:	f0 91 20 01 	lds	r31, 0x0120
    2d9e:	09 95       	icall
	}
}
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	ff 91       	pop	r31
    2da6:	ef 91       	pop	r30
    2da8:	bf 91       	pop	r27
    2daa:	af 91       	pop	r26
    2dac:	9f 91       	pop	r25
    2dae:	8f 91       	pop	r24
    2db0:	7f 91       	pop	r23
    2db2:	6f 91       	pop	r22
    2db4:	5f 91       	pop	r21
    2db6:	4f 91       	pop	r20
    2db8:	3f 91       	pop	r19
    2dba:	2f 91       	pop	r18
    2dbc:	0f 90       	pop	r0
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	0f 90       	pop	r0
    2dc2:	1f 90       	pop	r1
    2dc4:	18 95       	reti

00002dc6 <__vector_9>:

ISR(TIMER1_OVF_vect){
    2dc6:	1f 92       	push	r1
    2dc8:	0f 92       	push	r0
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	0f 92       	push	r0
    2dce:	11 24       	eor	r1, r1
    2dd0:	2f 93       	push	r18
    2dd2:	3f 93       	push	r19
    2dd4:	4f 93       	push	r20
    2dd6:	5f 93       	push	r21
    2dd8:	6f 93       	push	r22
    2dda:	7f 93       	push	r23
    2ddc:	8f 93       	push	r24
    2dde:	9f 93       	push	r25
    2de0:	af 93       	push	r26
    2de2:	bf 93       	push	r27
    2de4:	ef 93       	push	r30
    2de6:	ff 93       	push	r31
    2de8:	df 93       	push	r29
    2dea:	cf 93       	push	r28
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
	if(g_function_ptr != NULL_PTR){
    2df0:	80 91 1f 01 	lds	r24, 0x011F
    2df4:	90 91 20 01 	lds	r25, 0x0120
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	29 f0       	breq	.+10     	; 0x2e06 <__vector_9+0x40>
		(*g_function_ptr)();
    2dfc:	e0 91 1f 01 	lds	r30, 0x011F
    2e00:	f0 91 20 01 	lds	r31, 0x0120
    2e04:	09 95       	icall
	}
}
    2e06:	cf 91       	pop	r28
    2e08:	df 91       	pop	r29
    2e0a:	ff 91       	pop	r31
    2e0c:	ef 91       	pop	r30
    2e0e:	bf 91       	pop	r27
    2e10:	af 91       	pop	r26
    2e12:	9f 91       	pop	r25
    2e14:	8f 91       	pop	r24
    2e16:	7f 91       	pop	r23
    2e18:	6f 91       	pop	r22
    2e1a:	5f 91       	pop	r21
    2e1c:	4f 91       	pop	r20
    2e1e:	3f 91       	pop	r19
    2e20:	2f 91       	pop	r18
    2e22:	0f 90       	pop	r0
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	0f 90       	pop	r0
    2e28:	1f 90       	pop	r1
    2e2a:	18 95       	reti

00002e2c <__mulsi3>:
    2e2c:	62 9f       	mul	r22, r18
    2e2e:	d0 01       	movw	r26, r0
    2e30:	73 9f       	mul	r23, r19
    2e32:	f0 01       	movw	r30, r0
    2e34:	82 9f       	mul	r24, r18
    2e36:	e0 0d       	add	r30, r0
    2e38:	f1 1d       	adc	r31, r1
    2e3a:	64 9f       	mul	r22, r20
    2e3c:	e0 0d       	add	r30, r0
    2e3e:	f1 1d       	adc	r31, r1
    2e40:	92 9f       	mul	r25, r18
    2e42:	f0 0d       	add	r31, r0
    2e44:	83 9f       	mul	r24, r19
    2e46:	f0 0d       	add	r31, r0
    2e48:	74 9f       	mul	r23, r20
    2e4a:	f0 0d       	add	r31, r0
    2e4c:	65 9f       	mul	r22, r21
    2e4e:	f0 0d       	add	r31, r0
    2e50:	99 27       	eor	r25, r25
    2e52:	72 9f       	mul	r23, r18
    2e54:	b0 0d       	add	r27, r0
    2e56:	e1 1d       	adc	r30, r1
    2e58:	f9 1f       	adc	r31, r25
    2e5a:	63 9f       	mul	r22, r19
    2e5c:	b0 0d       	add	r27, r0
    2e5e:	e1 1d       	adc	r30, r1
    2e60:	f9 1f       	adc	r31, r25
    2e62:	bd 01       	movw	r22, r26
    2e64:	cf 01       	movw	r24, r30
    2e66:	11 24       	eor	r1, r1
    2e68:	08 95       	ret

00002e6a <__udivmodsi4>:
    2e6a:	a1 e2       	ldi	r26, 0x21	; 33
    2e6c:	1a 2e       	mov	r1, r26
    2e6e:	aa 1b       	sub	r26, r26
    2e70:	bb 1b       	sub	r27, r27
    2e72:	fd 01       	movw	r30, r26
    2e74:	0d c0       	rjmp	.+26     	; 0x2e90 <__udivmodsi4_ep>

00002e76 <__udivmodsi4_loop>:
    2e76:	aa 1f       	adc	r26, r26
    2e78:	bb 1f       	adc	r27, r27
    2e7a:	ee 1f       	adc	r30, r30
    2e7c:	ff 1f       	adc	r31, r31
    2e7e:	a2 17       	cp	r26, r18
    2e80:	b3 07       	cpc	r27, r19
    2e82:	e4 07       	cpc	r30, r20
    2e84:	f5 07       	cpc	r31, r21
    2e86:	20 f0       	brcs	.+8      	; 0x2e90 <__udivmodsi4_ep>
    2e88:	a2 1b       	sub	r26, r18
    2e8a:	b3 0b       	sbc	r27, r19
    2e8c:	e4 0b       	sbc	r30, r20
    2e8e:	f5 0b       	sbc	r31, r21

00002e90 <__udivmodsi4_ep>:
    2e90:	66 1f       	adc	r22, r22
    2e92:	77 1f       	adc	r23, r23
    2e94:	88 1f       	adc	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	1a 94       	dec	r1
    2e9a:	69 f7       	brne	.-38     	; 0x2e76 <__udivmodsi4_loop>
    2e9c:	60 95       	com	r22
    2e9e:	70 95       	com	r23
    2ea0:	80 95       	com	r24
    2ea2:	90 95       	com	r25
    2ea4:	9b 01       	movw	r18, r22
    2ea6:	ac 01       	movw	r20, r24
    2ea8:	bd 01       	movw	r22, r26
    2eaa:	cf 01       	movw	r24, r30
    2eac:	08 95       	ret

00002eae <__prologue_saves__>:
    2eae:	2f 92       	push	r2
    2eb0:	3f 92       	push	r3
    2eb2:	4f 92       	push	r4
    2eb4:	5f 92       	push	r5
    2eb6:	6f 92       	push	r6
    2eb8:	7f 92       	push	r7
    2eba:	8f 92       	push	r8
    2ebc:	9f 92       	push	r9
    2ebe:	af 92       	push	r10
    2ec0:	bf 92       	push	r11
    2ec2:	cf 92       	push	r12
    2ec4:	df 92       	push	r13
    2ec6:	ef 92       	push	r14
    2ec8:	ff 92       	push	r15
    2eca:	0f 93       	push	r16
    2ecc:	1f 93       	push	r17
    2ece:	cf 93       	push	r28
    2ed0:	df 93       	push	r29
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	ca 1b       	sub	r28, r26
    2ed8:	db 0b       	sbc	r29, r27
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	09 94       	ijmp

00002ee6 <__epilogue_restores__>:
    2ee6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ee8:	39 88       	ldd	r3, Y+17	; 0x11
    2eea:	48 88       	ldd	r4, Y+16	; 0x10
    2eec:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eee:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ef0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ef2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ef4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ef6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ef8:	b9 84       	ldd	r11, Y+9	; 0x09
    2efa:	c8 84       	ldd	r12, Y+8	; 0x08
    2efc:	df 80       	ldd	r13, Y+7	; 0x07
    2efe:	ee 80       	ldd	r14, Y+6	; 0x06
    2f00:	fd 80       	ldd	r15, Y+5	; 0x05
    2f02:	0c 81       	ldd	r16, Y+4	; 0x04
    2f04:	1b 81       	ldd	r17, Y+3	; 0x03
    2f06:	aa 81       	ldd	r26, Y+2	; 0x02
    2f08:	b9 81       	ldd	r27, Y+1	; 0x01
    2f0a:	ce 0f       	add	r28, r30
    2f0c:	d1 1d       	adc	r29, r1
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61
    2f18:	ed 01       	movw	r28, r26
    2f1a:	08 95       	ret

00002f1c <itoa>:
    2f1c:	fb 01       	movw	r30, r22
    2f1e:	9f 01       	movw	r18, r30
    2f20:	e8 94       	clt
    2f22:	42 30       	cpi	r20, 0x02	; 2
    2f24:	c4 f0       	brlt	.+48     	; 0x2f56 <itoa+0x3a>
    2f26:	45 32       	cpi	r20, 0x25	; 37
    2f28:	b4 f4       	brge	.+44     	; 0x2f56 <itoa+0x3a>
    2f2a:	4a 30       	cpi	r20, 0x0A	; 10
    2f2c:	29 f4       	brne	.+10     	; 0x2f38 <itoa+0x1c>
    2f2e:	97 fb       	bst	r25, 7
    2f30:	1e f4       	brtc	.+6      	; 0x2f38 <itoa+0x1c>
    2f32:	90 95       	com	r25
    2f34:	81 95       	neg	r24
    2f36:	9f 4f       	sbci	r25, 0xFF	; 255
    2f38:	64 2f       	mov	r22, r20
    2f3a:	77 27       	eor	r23, r23
    2f3c:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__udivmodhi4>
    2f40:	80 5d       	subi	r24, 0xD0	; 208
    2f42:	8a 33       	cpi	r24, 0x3A	; 58
    2f44:	0c f0       	brlt	.+2      	; 0x2f48 <itoa+0x2c>
    2f46:	89 5d       	subi	r24, 0xD9	; 217
    2f48:	81 93       	st	Z+, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	00 97       	sbiw	r24, 0x00	; 0
    2f4e:	a1 f7       	brne	.-24     	; 0x2f38 <itoa+0x1c>
    2f50:	16 f4       	brtc	.+4      	; 0x2f56 <itoa+0x3a>
    2f52:	5d e2       	ldi	r21, 0x2D	; 45
    2f54:	51 93       	st	Z+, r21
    2f56:	10 82       	st	Z, r1
    2f58:	c9 01       	movw	r24, r18
    2f5a:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <strrev>

00002f5e <strrev>:
    2f5e:	dc 01       	movw	r26, r24
    2f60:	fc 01       	movw	r30, r24
    2f62:	67 2f       	mov	r22, r23
    2f64:	71 91       	ld	r23, Z+
    2f66:	77 23       	and	r23, r23
    2f68:	e1 f7       	brne	.-8      	; 0x2f62 <strrev+0x4>
    2f6a:	32 97       	sbiw	r30, 0x02	; 2
    2f6c:	04 c0       	rjmp	.+8      	; 0x2f76 <strrev+0x18>
    2f6e:	7c 91       	ld	r23, X
    2f70:	6d 93       	st	X+, r22
    2f72:	70 83       	st	Z, r23
    2f74:	62 91       	ld	r22, -Z
    2f76:	ae 17       	cp	r26, r30
    2f78:	bf 07       	cpc	r27, r31
    2f7a:	c8 f3       	brcs	.-14     	; 0x2f6e <strrev+0x10>
    2f7c:	08 95       	ret

00002f7e <__udivmodhi4>:
    2f7e:	aa 1b       	sub	r26, r26
    2f80:	bb 1b       	sub	r27, r27
    2f82:	51 e1       	ldi	r21, 0x11	; 17
    2f84:	07 c0       	rjmp	.+14     	; 0x2f94 <__udivmodhi4_ep>

00002f86 <__udivmodhi4_loop>:
    2f86:	aa 1f       	adc	r26, r26
    2f88:	bb 1f       	adc	r27, r27
    2f8a:	a6 17       	cp	r26, r22
    2f8c:	b7 07       	cpc	r27, r23
    2f8e:	10 f0       	brcs	.+4      	; 0x2f94 <__udivmodhi4_ep>
    2f90:	a6 1b       	sub	r26, r22
    2f92:	b7 0b       	sbc	r27, r23

00002f94 <__udivmodhi4_ep>:
    2f94:	88 1f       	adc	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	5a 95       	dec	r21
    2f9a:	a9 f7       	brne	.-22     	; 0x2f86 <__udivmodhi4_loop>
    2f9c:	80 95       	com	r24
    2f9e:	90 95       	com	r25
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	08 95       	ret

00002fa6 <_exit>:
    2fa6:	f8 94       	cli

00002fa8 <__stop_program>:
    2fa8:	ff cf       	rjmp	.-2      	; 0x2fa8 <__stop_program>
